window.Modernizr=function(t,e,n){function i(t){w.cssText=t}function o(t,e){return i(C.join(t+";")+(e||""))}function r(t,e){return typeof t===e}function s(t,e){return!!~(""+t).indexOf(e)}function a(t,e){for(var i in t){var o=t[i];if(!s(o,"-")&&w[o]!==n)return"pfx"!=e||o}return!1}function l(t,e,i){for(var o in t){var s=e[t[o]];if(s!==n)return i===!1?t[o]:r(s,"function")?s.bind(i||e):s}return!1}function u(t,e,n){var i=t.charAt(0).toUpperCase()+t.slice(1),o=(t+" "+$.join(i+" ")+i).split(" ");return r(e,"string")||r(e,"undefined")?a(o,e):(o=(t+" "+E.join(i+" ")+i).split(" "),l(o,e,n))}function c(){p.input=function(n){for(var i=0,o=n.length;i<o;i++)N[n[i]]=!!(n[i]in b);return N.list&&(N.list=!(!e.createElement("datalist")||!t.HTMLDataListElement)),N}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(t){for(var i,o,r,s=0,a=t.length;s<a;s++)b.setAttribute("type",o=t[s]),i="text"!==b.type,i&&(b.value=k,b.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(o)&&b.style.WebkitAppearance!==n?(g.appendChild(b),r=e.defaultView,i=r.getComputedStyle&&"textfield"!==r.getComputedStyle(b,null).WebkitAppearance&&0!==b.offsetHeight,g.removeChild(b)):/^(search|tel)$/.test(o)||(i=/^(url|email)$/.test(o)?b.checkValidity&&b.checkValidity()===!1:b.value!=k)),j[t[s]]=!!i;return j}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var d,h,f="2.8.3",p={},m=!0,g=e.documentElement,v="modernizr",y=e.createElement(v),w=y.style,b=e.createElement("input"),k=":)",x={}.toString,C=" -webkit- -moz- -o- -ms- ".split(" "),T="Webkit Moz O ms",$=T.split(" "),E=T.toLowerCase().split(" "),S={svg:"http://www.w3.org/2000/svg"},D={},j={},N={},A=[],M=A.slice,U=function(t,n,i,o){var r,s,a,l,u=e.createElement("div"),c=e.body,d=c||e.createElement("body");if(parseInt(i,10))for(;i--;)a=e.createElement("div"),a.id=o?o[i]:v+(i+1),u.appendChild(a);return r=["&#173;",'<style id="s',v,'">',t,"</style>"].join(""),u.id=v,(c?u:d).innerHTML+=r,d.appendChild(u),c||(d.style.background="",d.style.overflow="hidden",l=g.style.overflow,g.style.overflow="hidden",g.appendChild(d)),s=n(u,t),c?u.parentNode.removeChild(u):(d.parentNode.removeChild(d),g.style.overflow=l),!!s},I=function(e){var n=t.matchMedia||t.msMatchMedia;if(n)return n(e)&&n(e).matches||!1;var i;return U("@media "+e+" { #"+v+" { position: absolute; } }",function(e){i="absolute"==(t.getComputedStyle?getComputedStyle(e,null):e.currentStyle).position}),i},L=function(){function t(t,o){o=o||e.createElement(i[t]||"div"),t="on"+t;var s=t in o;return s||(o.setAttribute||(o=e.createElement("div")),o.setAttribute&&o.removeAttribute&&(o.setAttribute(t,""),s=r(o[t],"function"),r(o[t],"undefined")||(o[t]=n),o.removeAttribute(t))),o=null,s}var i={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return t}(),O={}.hasOwnProperty;h=r(O,"undefined")||r(O.call,"undefined")?function(t,e){return e in t&&r(t.constructor.prototype[e],"undefined")}:function(t,e){return O.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var n=M.call(arguments,1),i=function(){if(this instanceof i){var o=function(){};o.prototype=e.prototype;var r=new o,s=e.apply(r,n.concat(M.call(arguments)));return Object(s)===s?s:r}return e.apply(t,n.concat(M.call(arguments)))};return i}),D.flexbox=function(){return u("flexWrap")},D.flexboxlegacy=function(){return u("boxDirection")},D.canvas=function(){var t=e.createElement("canvas");return!(!t.getContext||!t.getContext("2d"))},D.canvastext=function(){return!(!p.canvas||!r(e.createElement("canvas").getContext("2d").fillText,"function"))},D.webgl=function(){return!!t.WebGLRenderingContext},D.touch=function(){var n;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?n=!0:U(["@media (",C.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){n=9===t.offsetTop}),n},D.geolocation=function(){return"geolocation"in navigator},D.postmessage=function(){return!!t.postMessage},D.websqldatabase=function(){return!!t.openDatabase},D.indexedDB=function(){return!!u("indexedDB",t)},D.hashchange=function(){return L("hashchange",t)&&(e.documentMode===n||e.documentMode>7)},D.history=function(){return!(!t.history||!history.pushState)},D.draganddrop=function(){var t=e.createElement("div");return"draggable"in t||"ondragstart"in t&&"ondrop"in t},D.websockets=function(){return"WebSocket"in t||"MozWebSocket"in t},D.rgba=function(){return i("background-color:rgba(150,255,150,.5)"),s(w.backgroundColor,"rgba")},D.hsla=function(){return i("background-color:hsla(120,40%,100%,.5)"),s(w.backgroundColor,"rgba")||s(w.backgroundColor,"hsla")},D.multiplebgs=function(){return i("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(w.background)},D.backgroundsize=function(){return u("backgroundSize")},D.borderimage=function(){return u("borderImage")},D.borderradius=function(){return u("borderRadius")},D.boxshadow=function(){return u("boxShadow")},D.textshadow=function(){return""===e.createElement("div").style.textShadow},D.opacity=function(){return o("opacity:.55"),/^0.55$/.test(w.opacity)},D.cssanimations=function(){return u("animationName")},D.csscolumns=function(){return u("columnCount")},D.cssgradients=function(){var t="background-image:",e="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return i((t+"-webkit- ".split(" ").join(e+t)+C.join(n+t)).slice(0,-t.length)),s(w.backgroundImage,"gradient")},D.cssreflections=function(){return u("boxReflect")},D.csstransforms=function(){return!!u("transform")},D.csstransforms3d=function(){var t=!!u("perspective");return t&&"webkitPerspective"in g.style&&U("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(e,n){t=9===e.offsetLeft&&3===e.offsetHeight}),t},D.csstransitions=function(){return u("transition")},D.fontface=function(){var t;return U('@font-face {font-family:"font";src:url("https://")}',function(n,i){var o=e.getElementById("smodernizr"),r=o.sheet||o.styleSheet,s=r?r.cssRules&&r.cssRules[0]?r.cssRules[0].cssText:r.cssText||"":"";t=/src/i.test(s)&&0===s.indexOf(i.split(" ")[0])}),t},D.generatedcontent=function(){var t;return U(["#",v,"{font:0/0 a}#",v,':after{content:"',k,'";visibility:hidden;font:3px/1 a}'].join(""),function(e){t=e.offsetHeight>=3}),t},D.video=function(){var t=e.createElement("video"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=t.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=t.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(i){}return n},D.audio=function(){var t=e.createElement("audio"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=t.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(i){}return n},D.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(t){return!1}},D.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(t){return!1}},D.webworkers=function(){return!!t.Worker},D.applicationcache=function(){return!!t.applicationCache},D.svg=function(){return!!e.createElementNS&&!!e.createElementNS(S.svg,"svg").createSVGRect},D.inlinesvg=function(){var t=e.createElement("div");return t.innerHTML="<svg/>",(t.firstChild&&t.firstChild.namespaceURI)==S.svg},D.smil=function(){return!!e.createElementNS&&/SVGAnimate/.test(x.call(e.createElementNS(S.svg,"animate")))},D.svgclippaths=function(){return!!e.createElementNS&&/SVGClipPath/.test(x.call(e.createElementNS(S.svg,"clipPath")))};for(var H in D)h(D,H)&&(d=H.toLowerCase(),p[d]=D[H](),A.push((p[d]?"":"no-")+d));return p.input||c(),p.addTest=function(t,e){if("object"==typeof t)for(var i in t)h(t,i)&&p.addTest(i,t[i]);else{if(t=t.toLowerCase(),p[t]!==n)return p;e="function"==typeof e?e():e,"undefined"!=typeof m&&m&&(g.className+=" "+(e?"":"no-")+t),p[t]=e}return p},i(""),y=b=null,function(t,e){function n(t,e){var n=t.createElement("p"),i=t.getElementsByTagName("head")[0]||t.documentElement;return n.innerHTML="x<style>"+e+"</style>",i.insertBefore(n.lastChild,i.firstChild)}function i(){var t=y.elements;return"string"==typeof t?t.split(" "):t}function o(t){var e=v[t[m]];return e||(e={},g++,t[m]=g,v[g]=e),e}function r(t,n,i){if(n||(n=e),c)return n.createElement(t);i||(i=o(n));var r;return r=i.cache[t]?i.cache[t].cloneNode():p.test(t)?(i.cache[t]=i.createElem(t)).cloneNode():i.createElem(t),!r.canHaveChildren||f.test(t)||r.tagUrn?r:i.frag.appendChild(r)}function s(t,n){if(t||(t=e),c)return t.createDocumentFragment();n=n||o(t);for(var r=n.frag.cloneNode(),s=0,a=i(),l=a.length;s<l;s++)r.createElement(a[s]);return r}function a(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(n){return y.shivMethods?r(n,t,e):e.createElem(n)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/[\w\-]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(y,e.frag)}function l(t){t||(t=e);var i=o(t);return!y.shivCSS||u||i.hasCSS||(i.hasCSS=!!n(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),c||a(t,i),t}var u,c,d="3.7.0",h=t.html5||{},f=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,m="_html5shiv",g=0,v={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",u="hidden"in t,c=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return"undefined"==typeof t.cloneNode||"undefined"==typeof t.createDocumentFragment||"undefined"==typeof t.createElement}()}catch(n){u=!0,c=!0}}();var y={elements:h.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:d,shivCSS:h.shivCSS!==!1,supportsUnknownElements:c,shivMethods:h.shivMethods!==!1,type:"default",shivDocument:l,createElement:r,createDocumentFragment:s};t.html5=y,l(e)}(this,e),p._version=f,p._prefixes=C,p._domPrefixes=E,p._cssomPrefixes=$,p.mq=I,p.hasEvent=L,p.testProp=function(t){return a([t])},p.testAllProps=u,p.testStyles=U,p.prefixed=function(t,e,n){return e?u(t,e,n):u(t,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(m?" js "+A.join(" "):""),p}(this,this.document),function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=Z.type(t);return"function"!==n&&!Z.isWindow(t)&&(!(1!==t.nodeType||!e)||("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t))}function i(t,e,n){if(Z.isFunction(e))return Z.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return Z.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(at.test(e))return Z.filter(e,t,n);e=Z.filter(e,t)}return Z.grep(t,function(t){return X.call(e,t)>=0!==n})}function o(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function r(t){var e=pt[t]={};return Z.each(t.match(ft)||[],function(t,n){e[n]=!0}),e}function s(){J.removeEventListener("DOMContentLoaded",s,!1),t.removeEventListener("load",s,!1),Z.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+a.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(bt,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:wt.test(n)?Z.parseJSON(n):n)}catch(o){}yt.set(t,e,n)}else n=void 0;return n}function u(){return!0}function c(){return!1}function d(){try{return J.activeElement}catch(t){}}function h(t,e){return Z.nodeName(t,"table")&&Z.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function f(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=Ot.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function m(t,e){for(var n=0,i=t.length;n<i;n++)vt.set(t[n],"globalEval",!e||vt.get(e[n],"globalEval"))}function g(t,e){var n,i,o,r,s,a,l,u;if(1===e.nodeType){if(vt.hasData(t)&&(r=vt.access(t),s=vt.set(e,r),u=r.events)){delete s.handle,s.events={};for(o in u)for(n=0,i=u[o].length;n<i;n++)Z.event.add(e,o,u[o][n])}yt.hasData(t)&&(a=yt.access(t),l=Z.extend({},a),yt.set(e,l))}}function v(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&Z.nodeName(t,e)?Z.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Tt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function w(e,n){var i,o=Z(n.createElement(e)).appendTo(n.body),r=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(o[0]))?i.display:Z.css(o[0],"display");return o.detach(),r}function b(t){var e=J,n=Ft[t];return n||(n=w(t,e),"none"!==n&&n||(Pt=(Pt||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Pt[0].contentDocument,e.write(),e.close(),n=w(t,e),Pt.detach()),Ft[t]=n),n}function k(t,e,n){var i,o,r,s,a=t.style;return n=n||zt(t),n&&(s=n.getPropertyValue(e)||n[e]),n&&(""!==s||Z.contains(t.ownerDocument,t)||(s=Z.style(t,e)),Wt.test(s)&&Rt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function C(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,o=Gt.length;o--;)if(e=Gt[o]+n,e in t)return e;return i}function T(t,e,n){var i=Bt.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function $(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=Z.css(t,n+xt[r],!0,o)),i?("content"===n&&(s-=Z.css(t,"padding"+xt[r],!0,o)),"margin"!==n&&(s-=Z.css(t,"border"+xt[r]+"Width",!0,o))):(s+=Z.css(t,"padding"+xt[r],!0,o),"padding"!==n&&(s+=Z.css(t,"border"+xt[r]+"Width",!0,o)));return s}function E(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=zt(t),s="border-box"===Z.css(t,"boxSizing",!1,r);if(o<=0||null==o){if(o=k(t,e,r),(o<0||null==o)&&(o=t.style[e]),Wt.test(o))return o;i=s&&(Q.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+$(t,e,n||(s?"border":"content"),i,r)+"px"}function S(t,e){for(var n,i,o,r=[],s=0,a=t.length;s<a;s++)i=t[s],i.style&&(r[s]=vt.get(i,"olddisplay"),n=i.style.display,e?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Ct(i)&&(r[s]=vt.access(i,"olddisplay",b(i.nodeName)))):(o=Ct(i),"none"===n&&o||vt.set(i,"olddisplay",o?n:Z.css(i,"display"))));for(s=0;s<a;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[s]||"":"none"));return t}function D(t,e,n,i,o){return new D.prototype.init(t,e,n,i,o)}function j(){return setTimeout(function(){Qt=void 0}),Qt=Z.now()}function N(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)n=xt[i],o["margin"+n]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function A(t,e,n){for(var i,o=(ne[e]||[]).concat(ne["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function M(t,e,n){var i,o,r,s,a,l,u,c,d=this,h={},f=t.style,p=t.nodeType&&Ct(t),m=vt.get(t,"fxshow");n.queue||(a=Z._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,Z.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],u=Z.css(t,"display"),c="none"===u?vt.get(t,"olddisplay")||b(t.nodeName):u,"inline"===c&&"none"===Z.css(t,"float")&&(f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in e)if(o=e[i],Kt.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;p=!0}h[i]=m&&m[i]||Z.style(t,i)}else u=void 0;if(Z.isEmptyObject(h))"inline"===("none"===u?b(t.nodeName):u)&&(f.display=u);else{m?"hidden"in m&&(p=m.hidden):m=vt.access(t,"fxshow",{}),r&&(m.hidden=!p),p?Z(t).show():d.done(function(){Z(t).hide()}),d.done(function(){var e;vt.remove(t,"fxshow");for(e in h)Z.style(t,e,h[e])});for(i in h)s=A(p?m[i]:0,i,d),i in m||(m[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function U(t,e){var n,i,o,r,s;for(n in t)if(i=Z.camelCase(n),o=e[i],r=t[n],Z.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),s=Z.cssHooks[i],s&&"expand"in s){r=s.expand(r),delete t[i];for(n in r)n in t||(t[n]=r[n],e[n]=o)}else e[i]=o}function I(t,e,n){var i,o,r=0,s=ee.length,a=Z.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Qt||j(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,r=1-i,s=0,l=u.tweens.length;s<l;s++)u.tweens[s].run(r);return a.notifyWith(t,[u,r,n]),r<1&&l?n:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:Z.extend({},e),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Qt||j(),duration:n.duration,tweens:[],createTween:function(e,n){var i=Z.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)u.tweens[n].run(1);return e?a.resolveWith(t,[u,e]):a.rejectWith(t,[u,e]),this}}),c=u.props;for(U(c,u.opts.specialEasing);r<s;r++)if(i=ee[r].call(u,t,c,u.opts))return i;return Z.map(c,A,u),Z.isFunction(u.opts.start)&&u.opts.start.call(t,u),Z.fx.timer(Z.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function L(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(ft)||[];if(Z.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function O(t,e,n,i){function o(a){var l;return r[a]=!0,Z.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),o(u),!1)}),l}var r={},s=t===we;return o(e.dataTypes[0])||!r["*"]&&o("*")}function H(t,e){var n,i,o=Z.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&Z.extend(!0,t,i),t}function q(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}function P(t,e,n,i){var o,r,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(r=c.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(s=u[l+" "+r]||u["* "+r],!s)for(o in u)if(a=o.split(" "),a[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[o]:u[o]!==!0&&(r=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}function F(t,e,n,i){var o;if(Z.isArray(e))Z.each(e,function(e,o){n||Te.test(t)?i(t,o):F(t+"["+("object"==typeof o?e:"")+"]",o,n,i)});else if(n||"object"!==Z.type(e))i(t,e);else for(o in e)F(t+"["+o+"]",e[o],n,i)}function R(t){return Z.isWindow(t)?t:9===t.nodeType&&t.defaultView}var W=[],z=W.slice,_=W.concat,B=W.push,X=W.indexOf,V={},Y=V.toString,G=V.hasOwnProperty,Q={},J=t.document,K="2.1.4",Z=function(t,e){return new Z.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,it=function(t,e){return e.toUpperCase()};Z.fn=Z.prototype={jquery:K,constructor:Z,selector:"",length:0,toArray:function(){return z.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:z.call(this)},pushStack:function(t){var e=Z.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return Z.each(this,t,e)},map:function(t){return this.pushStack(Z.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(z.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:B,sort:W.sort,splice:W.splice},Z.extend=Z.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||Z.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(u&&i&&(Z.isPlainObject(i)||(o=Z.isArray(i)))?(o?(o=!1,r=n&&Z.isArray(n)?n:[]):r=n&&Z.isPlainObject(n)?n:{},s[e]=Z.extend(u,r,i)):void 0!==i&&(s[e]=i));return s},Z.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===Z.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!Z.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"===Z.type(t)&&!t.nodeType&&!Z.isWindow(t)&&!(t.constructor&&!G.call(t.constructor.prototype,"isPrototypeOf"))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?V[Y.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=Z.trim(t),t&&(1===t.indexOf("use strict")?(e=J.createElement("script"),e.text=t,J.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,it)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var o,r=0,s=t.length,a=n(t);if(i){if(a)for(;r<s&&(o=e.apply(t[r],i),o!==!1);r++);else for(r in t)if(o=e.apply(t[r],i),o===!1)break}else if(a)for(;r<s&&(o=e.call(t[r],r,t[r]),o!==!1);r++);else for(r in t)if(o=e.call(t[r],r,t[r]),o===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?Z.merge(i,"string"==typeof t?[t]:t):B.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:X.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i,o=[],r=0,s=t.length,a=!n;r<s;r++)i=!e(t[r],r),i!==a&&o.push(t[r]);return o},map:function(t,e,i){var o,r=0,s=t.length,a=n(t),l=[];if(a)for(;r<s;r++)o=e(t[r],r,i),null!=o&&l.push(o);else for(r in t)o=e(t[r],r,i),null!=o&&l.push(o);return _.apply([],l)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),Z.isFunction(t))return i=z.call(arguments,2),o=function(){return t.apply(e||this,i.concat(z.call(arguments)))},o.guid=t.guid=t.guid||Z.guid++,o},now:Date.now,support:Q}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var ot=function(t){function e(t,e,n,i){var o,r,s,a,l,u,d,f,p,m;if((e?e.ownerDocument||e:F)!==M&&A(e),e=e||M,n=n||[],a=e.nodeType,"string"!=typeof t||!t||1!==a&&9!==a&&11!==a)return n;if(!i&&I){if(11!==a&&(o=yt.exec(t)))if(s=o[1]){if(9===a){if(r=e.getElementById(s),!r||!r.parentNode)return n;if(r.id===s)return n.push(r),n}else if(e.ownerDocument&&(r=e.ownerDocument.getElementById(s))&&q(e,r)&&r.id===s)return n.push(r),n}else{if(o[2])return K.apply(n,e.getElementsByTagName(t)),n;if((s=o[3])&&k.getElementsByClassName)return K.apply(n,e.getElementsByClassName(s)),n}if(k.qsa&&(!L||!L.test(t))){if(f=d=P,p=e,m=1!==a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(u=$(t),(d=e.getAttribute("id"))?f=d.replace(bt,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",l=u.length;l--;)u[l]=f+h(u[l]);p=wt.test(t)&&c(e.parentNode)||e,m=u.join(",")}if(m)try{return K.apply(n,p.querySelectorAll(m)),n}catch(g){}finally{d||e.removeAttribute("id")}}}return S(t.replace(lt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[P]=!0,t}function o(t){var e=M.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function r(t,e){for(var n=t.split("|"),i=t.length;i--;)x.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function d(){}function h(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,o=n&&"parentNode"===i,r=W++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r)}:function(e,n,s){var a,l,u=[R,r];if(s){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if(l=e[P]||(e[P]={}),(a=l[i])&&a[0]===R&&a[1]===r)return u[2]=a[2];if(l[i]=u,u[2]=t(e,n,s))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var o=0,r=n.length;o<r;o++)e(t,n[o],i);return i}function g(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,u=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),u&&e.push(a)));return s}function v(t,e,n,o,r,s){return o&&!o[P]&&(o=v(o)),r&&!r[P]&&(r=v(r,s)),i(function(i,s,a,l){var u,c,d,h=[],f=[],p=s.length,v=i||m(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:g(v,h,t,a,l),w=n?r||(i?t:p||o)?[]:s:y;if(n&&n(y,w,a,l),o)for(u=g(w,f),o(u,[],a,l),c=u.length;c--;)(d=u[c])&&(w[f[c]]=!(y[f[c]]=d));if(i){if(r||t){if(r){for(u=[],c=w.length;c--;)(d=w[c])&&u.push(y[c]=d);r(null,w=[],u,l)}for(c=w.length;c--;)(d=w[c])&&(u=r?tt(i,d):h[c])>-1&&(i[u]=!(s[u]=d))}}else w=g(w===s?w.splice(p,w.length):w),r?r(null,s,w,l):K.apply(s,w)})}function y(t){for(var e,n,i,o=t.length,r=x.relative[t[0].type],s=r||x.relative[" "],a=r?1:0,l=f(function(t){return t===e},s,!0),u=f(function(t){return tt(e,t)>-1},s,!0),c=[function(t,n,i){var o=!r&&(i||n!==D)||((e=n).nodeType?l(t,n,i):u(t,n,i));return e=null,o}];a<o;a++)if(n=x.relative[t[a].type])c=[f(p(c),n)];else{if(n=x.filter[t[a].type].apply(null,t[a].matches),n[P]){for(i=++a;i<o&&!x.relative[t[i].type];i++);return v(a>1&&p(c),a>1&&h(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(lt,"$1"),n,a<i&&y(t.slice(a,i)),i<o&&y(t=t.slice(i)),i<o&&h(t))}c.push(n)}return p(c)}function w(t,n){var o=n.length>0,r=t.length>0,s=function(i,s,a,l,u){var c,d,h,f=0,p="0",m=i&&[],v=[],y=D,w=i||r&&x.find.TAG("*",u),b=R+=null==y?1:Math.random()||.1,k=w.length;for(u&&(D=s!==M&&s);p!==k&&null!=(c=w[p]);p++){if(r&&c){for(d=0;h=t[d++];)if(h(c,s,a)){l.push(c);break}u&&(R=b)}o&&((c=!h&&c)&&f--,i&&m.push(c))}if(f+=p,o&&p!==f){for(d=0;h=n[d++];)h(m,v,s,a);if(i){if(f>0)for(;p--;)m[p]||v[p]||(v[p]=Q.call(l));v=g(v)}K.apply(l,v),u&&!i&&v.length>0&&f+n.length>1&&e.uniqueSort(l)}return u&&(R=b,D=y),m};return o?i(s):s}var b,k,x,C,T,$,E,S,D,j,N,A,M,U,I,L,O,H,q,P="sizzle"+1*new Date,F=t.document,R=0,W=0,z=n(),_=n(),B=n(),X=function(t,e){return t===e&&(N=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,tt=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot=it.replace("w","w#"),rt="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ot+"))|)"+nt+"*\\]",st=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ut=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),dt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(st),ft=new RegExp("^"+ot+"$"),pt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it.replace("w","w*")+")"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},mt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/[+~]/,bt=/'|\\/g,kt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Ct=function(){A()};try{K.apply(G=Z.call(F.childNodes),F.childNodes),G[F.childNodes.length].nodeType}catch(Tt){K={apply:G.length?function(t,e){J.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}k=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},A=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:F;return i!==M&&9===i.nodeType&&i.documentElement?(M=i,U=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Ct,!1):n.attachEvent&&n.attachEvent("onunload",Ct)),I=!T(i),k.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),k.getElementsByTagName=o(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),k.getElementsByClassName=vt.test(i.getElementsByClassName),k.getById=o(function(t){return U.appendChild(t).id=P,!i.getElementsByName||!i.getElementsByName(P).length}),k.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&I){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},x.filter.ID=function(t){var e=t.replace(kt,xt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(kt,xt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=k.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):k.qsa?e.querySelectorAll(t):void 0;
}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=k.getElementsByClassName&&function(t,e){if(I)return e.getElementsByClassName(t)},O=[],L=[],(k.qsa=vt.test(i.querySelectorAll))&&(o(function(t){U.appendChild(t).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+P+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+P+"+*").length||L.push(".#.+[+~]")}),o(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(k.matchesSelector=vt.test(H=U.matches||U.webkitMatchesSelector||U.mozMatchesSelector||U.oMatchesSelector||U.msMatchesSelector))&&o(function(t){k.disconnectedMatch=H.call(t,"div"),H.call(t,"[s!='']:x"),O.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),O=O.length&&new RegExp(O.join("|")),e=vt.test(U.compareDocumentPosition),q=e||vt.test(U.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return N=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!k.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===F&&q(F,t)?-1:e===i||e.ownerDocument===F&&q(F,e)?1:j?tt(j,t)-tt(j,e):0:4&n?-1:1)}:function(t,e){if(t===e)return N=!0,0;var n,o=0,r=t.parentNode,a=e.parentNode,l=[t],u=[e];if(!r||!a)return t===i?-1:e===i?1:r?-1:a?1:j?tt(j,t)-tt(j,e):0;if(r===a)return s(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;l[o]===u[o];)o++;return o?s(l[o],u[o]):l[o]===F?-1:u[o]===F?1:0},i):M},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==M&&A(t),n=n.replace(dt,"='$1']"),k.matchesSelector&&I&&(!O||!O.test(n))&&(!L||!L.test(n)))try{var i=H.call(t,n);if(i||k.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(o){}return e(n,M,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==M&&A(t),q(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==M&&A(t);var n=x.attrHandle[e.toLowerCase()],i=n&&Y.call(x.attrHandle,e.toLowerCase())?n(t,e,!I):void 0;return void 0!==i?i:k.attributes||!I?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,o=0;if(N=!k.detectDuplicates,j=!k.sortStable&&t.slice(0),t.sort(X),N){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return j=null,t},C=e.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=C(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=C(e);return n},x=e.selectors={cacheLength:50,createPseudo:i,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(kt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(kt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=$(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(kt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=z[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&z(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(o){var r=e.attr(o,t);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(at," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var u,c,d,h,f,p,m=r!==s?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(g){if(r){for(;m;){for(d=e;d=d[m];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=m="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?g.firstChild:g.lastChild],s&&y){for(c=g[P]||(g[P]={}),u=c[t]||[],f=u[0]===R&&u[1],h=u[0]===R&&u[2],d=f&&g.childNodes[f];d=++f&&d&&d[m]||(h=f=0)||p.pop();)if(1===d.nodeType&&++h&&d===e){c[t]=[R,f,h];break}}else if(y&&(u=(e[P]||(e[P]={}))[t])&&u[0]===R)h=u[1];else for(;(d=++f&&d&&d[m]||(h=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++h||(y&&((d[P]||(d[P]={}))[t]=[R,h]),d!==e)););return h-=o,h===i||h%i===0&&h/i>=0}}},PSEUDO:function(t,n){var o,r=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[P]?r(n):r.length>1?(o=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,o=r(t,n),s=o.length;s--;)i=tt(t,o[s]),t[i]=!(e[i]=o[s])}):function(t){return r(t,0,o)}):r}},pseudos:{not:i(function(t){var e=[],n=[],o=E(t.replace(lt,"$1"));return o[P]?i(function(t,e,n,i){for(var r,s=o(t,null,i,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))}):function(t,i,r){return e[0]=t,o(e,null,r,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(kt,xt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:i(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(kt,xt).toLowerCase(),function(e){var n;do if(n=I?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===U},focus:function(t){return t===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return mt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=l(b);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,$=e.tokenize=function(t,n){var i,o,r,s,a,l,u,c=_[t+" "];if(c)return n?0:c.slice(0);for(a=t,l=[],u=x.preFilter;a;){i&&!(o=ut.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=ct.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(lt," ")}),a=a.slice(i.length));for(s in x.filter)!(o=pt[s].exec(a))||u[s]&&!(o=u[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):_(t,l).slice(0)},E=e.compile=function(t,e){var n,i=[],o=[],r=B[t+" "];if(!r){for(e||(e=$(t)),n=e.length;n--;)r=y(e[n]),r[P]?i.push(r):o.push(r);r=B(t,w(o,i)),r.selector=t}return r},S=e.select=function(t,e,n,i){var o,r,s,a,l,u="function"==typeof t&&t,d=!i&&$(t=u.selector||t);if(n=n||[],1===d.length){if(r=d[0]=d[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&k.getById&&9===e.nodeType&&I&&x.relative[r[1].type]){if(e=(x.find.ID(s.matches[0].replace(kt,xt),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=pt.needsContext.test(t)?0:r.length;o--&&(s=r[o],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(kt,xt),wt.test(r[0].type)&&c(e.parentNode)||e))){if(r.splice(o,1),t=i.length&&h(r),!t)return K.apply(n,i),n;break}}return(u||E(t,d))(i,e,!I,n,wt.test(t)&&c(e.parentNode)||e),n},k.sortStable=P.split("").sort(X).join("")===P,k.detectDuplicates=!!N,A(),k.sortDetached=o(function(t){return 1&t.compareDocumentPosition(M.createElement("div"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||r("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),k.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||r("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||r(et,function(t,e,n){var i;if(!n)return t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);Z.find=ot,Z.expr=ot.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=ot.uniqueSort,Z.text=ot.getText,Z.isXMLDoc=ot.isXML,Z.contains=ot.contains;var rt=Z.expr.match.needsContext,st=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,at=/^.[^:#\[\.,]*$/;Z.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?Z.find.matchesSelector(i,t)?[i]:[]:Z.find.matches(t,Z.grep(e,function(t){return 1===t.nodeType}))},Z.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(Z(t).filter(function(){for(e=0;e<n;e++)if(Z.contains(o[e],this))return!0}));for(e=0;e<n;e++)Z.find(t,o[e],i);return i=this.pushStack(n>1?Z.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&rt.test(t)?Z(t):t||[],!1).length}});var lt,ut=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ct=Z.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ut.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof Z?e[0]:e,Z.merge(this,Z.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:J,!0)),st.test(n[1])&&Z.isPlainObject(e))for(n in e)Z.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=J.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=J,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):Z.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(Z):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),Z.makeArray(t,this))};ct.prototype=Z.fn,lt=Z(J);var dt=/^(?:parents|prev(?:Until|All))/,ht={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&Z(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),Z.fn.extend({has:function(t){var e=Z(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(Z.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,r=[],s=rt.test(t)||"string"!=typeof t?Z(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?Z.unique(r):r)},index:function(t){return t?"string"==typeof t?X.call(Z(t),this[0]):X.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(Z.unique(Z.merge(this.get(),Z(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),Z.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Z.dir(t,"parentNode")},parentsUntil:function(t,e,n){return Z.dir(t,"parentNode",n)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return Z.dir(t,"nextSibling")},prevAll:function(t){return Z.dir(t,"previousSibling")},nextUntil:function(t,e,n){return Z.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return Z.dir(t,"previousSibling",n)},siblings:function(t){return Z.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return Z.sibling(t.firstChild)},contents:function(t){return t.contentDocument||Z.merge([],t.childNodes)}},function(t,e){Z.fn[t]=function(n,i){var o=Z.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=Z.filter(i,o)),this.length>1&&(ht[t]||Z.unique(o),dt.test(t)&&o.reverse()),this.pushStack(o)}});var ft=/\S+/g,pt={};Z.Callbacks=function(t){t="string"==typeof t?pt[t]||r(t):Z.extend({},t);var e,n,i,o,s,a,l=[],u=!t.once&&[],c=function(r){for(e=t.memory&&r,n=!0,a=o||0,o=0,s=l.length,i=!0;l&&a<s;a++)if(l[a].apply(r[0],r[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,l&&(u?u.length&&c(u.shift()):e?l=[]:d.disable())},d={add:function(){if(l){var n=l.length;!function r(e){Z.each(e,function(e,n){var i=Z.type(n);"function"===i?t.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==i&&r(n)})}(arguments),i?s=l.length:e&&(o=n,c(e))}return this},remove:function(){return l&&Z.each(arguments,function(t,e){for(var n;(n=Z.inArray(e,l,n))>-1;)l.splice(n,1),i&&(n<=s&&s--,n<=a&&a--)}),this},has:function(t){return t?Z.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=u=e=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,e||d.disable(),this},locked:function(){return!u},fireWith:function(t,e){return!l||n&&!u||(e=e||[],e=[t,e.slice?e.slice():e],i?u.push(e):c(e)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},Z.extend({Deferred:function(t){var e=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return Z.Deferred(function(n){Z.each(e,function(e,r){var s=Z.isFunction(t[e])&&t[e];o[r[1]](function(){var t=s&&s.apply(this,arguments);t&&Z.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[r[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?Z.extend(t,i):i}},o={};return i.pipe=i.then,Z.each(e,function(t,r){var s=r[2],a=r[3];i[r[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,o=0,r=z.call(arguments),s=r.length,a=1!==s||t&&Z.isFunction(t.promise)?s:0,l=1===a?t:Z.Deferred(),u=function(t,n,i){return function(o){n[t]=this,i[t]=arguments.length>1?z.call(arguments):o,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);o<s;o++)r[o]&&Z.isFunction(r[o].promise)?r[o].promise().done(u(o,i,r)).fail(l.reject).progress(u(o,n,e)):--a;return a||l.resolveWith(i,r),l.promise()}});var mt;Z.fn.ready=function(t){return Z.ready.promise().done(t),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(t){t?Z.readyWait++:Z.ready(!0)},ready:function(t){(t===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,t!==!0&&--Z.readyWait>0||(mt.resolveWith(J,[Z]),Z.fn.triggerHandler&&(Z(J).triggerHandler("ready"),Z(J).off("ready"))))}}),Z.ready.promise=function(e){return mt||(mt=Z.Deferred(),"complete"===J.readyState?setTimeout(Z.ready):(J.addEventListener("DOMContentLoaded",s,!1),t.addEventListener("load",s,!1))),mt.promise(e)},Z.ready.promise();var gt=Z.access=function(t,e,n,i,o,r,s){var a=0,l=t.length,u=null==n;if("object"===Z.type(n)){o=!0;for(a in n)Z.access(t,e,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,Z.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(Z(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:u?e.call(t):l?e(t[0],n):r};Z.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},a.uid=1,a.accepts=Z.acceptData,a.prototype={key:function(t){if(!a.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=a.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,Z.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,o=this.key(t),r=this.cache[o];if("string"==typeof e)r[e]=n;else if(Z.isEmptyObject(r))Z.extend(this.cache[o],e);else for(i in e)r[i]=e[i];return r},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,Z.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=this.key(t),s=this.cache[r];if(void 0===e)this.cache[r]={};else{Z.isArray(e)?i=e.concat(e.map(Z.camelCase)):(o=Z.camelCase(e),e in s?i=[e,o]:(i=o,i=i in s?[i]:i.match(ft)||[])),n=i.length;for(;n--;)delete s[i[n]]}},hasData:function(t){return!Z.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new a,yt=new a,wt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,bt=/([A-Z])/g;Z.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return vt.access(t,e,n)},_removeData:function(t,e){vt.remove(t,e)}}),Z.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=yt.get(r),1===r.nodeType&&!vt.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=Z.camelCase(i.slice(5)),l(r,i,o[i])));vt.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){yt.set(this,t)}):gt(this,function(e){var n,i=Z.camelCase(t);if(r&&void 0===e){if(n=yt.get(r,t),void 0!==n)return n;if(n=yt.get(r,i),void 0!==n)return n;if(n=l(r,i,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,i);yt.set(this,i,e),t.indexOf("-")!==-1&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),Z.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=vt.get(t,e),n&&(!i||Z.isArray(n)?i=vt.access(t,e,Z.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=Z.queue(t,e),i=n.length,o=n.shift(),r=Z._queueHooks(t,e),s=function(){Z.dequeue(t,e)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return vt.get(t,n)||vt.access(t,n,{empty:Z.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",n])})})}}),Z.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?Z.queue(this[0],t):void 0===e?this:this.each(function(){var n=Z.queue(this,t,e);Z._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&Z.dequeue(this,t)})},dequeue:function(t){return this.each(function(){Z.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=Z.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=vt.get(r[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var kt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xt=["Top","Right","Bottom","Left"],Ct=function(t,e){return t=e||t,"none"===Z.css(t,"display")||!Z.contains(t.ownerDocument,t)},Tt=/^(?:checkbox|radio)$/i;!function(){var t=J.createDocumentFragment(),e=t.appendChild(J.createElement("div")),n=J.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),Q.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var $t="undefined";Q.focusinBubbles="onfocusin"in t;var Et=/^key/,St=/^(?:mouse|pointer|contextmenu)|click/,Dt=/^(?:focusinfocus|focusoutblur)$/,jt=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,u,c,d,h,f,p,m,g=vt.get(t);if(g)for(n.handler&&(r=n,n=r.handler,o=r.selector),n.guid||(n.guid=Z.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(e){return typeof Z!==$t&&Z.event.triggered!==e.type?Z.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ft)||[""],u=e.length;u--;)a=jt.exec(e[u])||[],f=m=a[1],p=(a[2]||"").split(".").sort(),f&&(d=Z.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=Z.event.special[f]||{},c=Z.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&Z.expr.match.needsContext.test(o),namespace:p.join(".")},r),(h=l[f])||(h=l[f]=[],h.delegateCount=0,d.setup&&d.setup.call(t,i,p,s)!==!1||t.addEventListener&&t.addEventListener(f,s,!1)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,c):h.push(c),Z.event.global[f]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,u,c,d,h,f,p,m,g=vt.hasData(t)&&vt.get(t);if(g&&(l=g.events)){for(e=(e||"").match(ft)||[""],u=e.length;u--;)if(a=jt.exec(e[u])||[],f=m=a[1],p=(a[2]||"").split(".").sort(),f){for(d=Z.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,h=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=h.length;r--;)c=h[r],!o&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(r,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(t,c));s&&!h.length&&(d.teardown&&d.teardown.call(t,p,g.handle)!==!1||Z.removeEvent(t,f,g.handle),delete l[f])}else for(f in l)Z.event.remove(t,f+e[u],n,i,!0);Z.isEmptyObject(l)&&(delete g.handle,vt.remove(t,"events"))}},trigger:function(e,n,i,o){var r,s,a,l,u,c,d,h=[i||J],f=G.call(e,"type")?e.type:e,p=G.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||J,3!==i.nodeType&&8!==i.nodeType&&!Dt.test(f+Z.event.triggered)&&(f.indexOf(".")>=0&&(p=f.split("."),f=p.shift(),p.sort()),u=f.indexOf(":")<0&&"on"+f,e=e[Z.expando]?e:new Z.Event(f,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:Z.makeArray(n,[e]),d=Z.event.special[f]||{},o||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!o&&!d.noBubble&&!Z.isWindow(i)){for(l=d.delegateType||f,Dt.test(l+f)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(i.ownerDocument||J)&&h.push(a.defaultView||a.parentWindow||t)}for(r=0;(s=h[r++])&&!e.isPropagationStopped();)e.type=r>1?l:d.bindType||f,c=(vt.get(s,"events")||{})[e.type]&&vt.get(s,"handle"),c&&c.apply(s,n),c=u&&s[u],c&&c.apply&&Z.acceptData(s)&&(e.result=c.apply(s,n),e.result===!1&&e.preventDefault());return e.type=f,o||e.isDefaultPrevented()||d._default&&d._default.apply(h.pop(),n)!==!1||!Z.acceptData(i)||u&&Z.isFunction(i[f])&&!Z.isWindow(i)&&(a=i[u],a&&(i[u]=null),Z.event.triggered=f,i[f](),Z.event.triggered=void 0,a&&(i[u]=a)),e.result}},dispatch:function(t){t=Z.event.fix(t);var e,n,i,o,r,s=[],a=z.call(arguments),l=(vt.get(this,"events")||{})[t.type]||[],u=Z.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(s=Z.event.handlers.call(this,t,l),e=0;(o=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!t.isImmediatePropagationStopped();)t.namespace_re&&!t.namespace_re.test(r.namespace)||(t.handleObj=r,t.data=r.data,i=((Z.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(i=[],n=0;n<a;n++)r=e[n],o=r.selector+" ",void 0===i[o]&&(i[o]=r.needsContext?Z(o,this).index(l)>=0:Z.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||J,i=n.documentElement,o=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[Z.expando])return t;var e,n,i,o=t.type,r=t,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=St.test(o)?this.mouseHooks:Et.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new Z.Event(r),e=i.length;e--;)n=i[e],t[n]=r[n];return t.target||(t.target=J),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==d()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===d()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&Z.nodeName(this,"input"))return this.click(),!1},_default:function(t){return Z.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var o=Z.extend(new Z.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?Z.event.trigger(o,null,e):Z.event.dispatch.call(e,o),o.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},Z.Event=function(t,e){return this instanceof Z.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?u:c):this.type=t,e&&Z.extend(this,e),this.timeStamp=t&&t.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(t,e)},Z.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=u,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){Z.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return o&&(o===i||Z.contains(i,o))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),Q.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){Z.event.simulate(e,t.target,Z.event.fix(t),!0)};Z.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=vt.access(i,e);o||i.addEventListener(t,n,!0),vt.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=vt.access(i,e)-1;o?vt.access(i,e,o):(i.removeEventListener(t,n,!0),vt.remove(i,e))}}}),Z.fn.extend({on:function(t,e,n,i,o){var r,s;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(s in t)this.on(s,e,n,t[s],o);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=c;else if(!i)return this;return 1===o&&(r=i,i=function(t){return Z().off(t),r.apply(this,arguments)},i.guid=r.guid||(r.guid=Z.guid++)),this.each(function(){Z.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,Z(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=c),this.each(function(){Z.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){Z.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return Z.event.trigger(t,e,n,!0)}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,At=/<([\w:]+)/,Mt=/<|&#?\w+;/,Ut=/<(?:script|style|link)/i,It=/checked\s*(?:[^=]|=\s*.checked.)/i,Lt=/^$|\/(?:java|ecma)script/i,Ot=/^true\/(.*)/,Ht=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};qt.optgroup=qt.option,qt.tbody=qt.tfoot=qt.colgroup=qt.caption=qt.thead,qt.th=qt.td,Z.extend({clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=Z.contains(t.ownerDocument,t);if(!(Q.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||Z.isXMLDoc(t)))for(s=v(a),r=v(t),i=0,o=r.length;i<o;i++)y(r[i],s[i]);if(e)if(n)for(r=r||v(t),s=s||v(a),i=0,o=r.length;i<o;i++)g(r[i],s[i]);else g(t,a);return s=v(a,"script"),s.length>0&&m(s,!l&&v(t,"script")),a},buildFragment:function(t,e,n,i){for(var o,r,s,a,l,u,c=e.createDocumentFragment(),d=[],h=0,f=t.length;h<f;h++)if(o=t[h],o||0===o)if("object"===Z.type(o))Z.merge(d,o.nodeType?[o]:o);else if(Mt.test(o)){for(r=r||c.appendChild(e.createElement("div")),s=(At.exec(o)||["",""])[1].toLowerCase(),a=qt[s]||qt._default,
r.innerHTML=a[1]+o.replace(Nt,"<$1></$2>")+a[2],u=a[0];u--;)r=r.lastChild;Z.merge(d,r.childNodes),r=c.firstChild,r.textContent=""}else d.push(e.createTextNode(o));for(c.textContent="",h=0;o=d[h++];)if((!i||Z.inArray(o,i)===-1)&&(l=Z.contains(o.ownerDocument,o),r=v(c.appendChild(o),"script"),l&&m(r),n))for(u=0;o=r[u++];)Lt.test(o.type||"")&&n.push(o);return c},cleanData:function(t){for(var e,n,i,o,r=Z.event.special,s=0;void 0!==(n=t[s]);s++){if(Z.acceptData(n)&&(o=n[vt.expando],o&&(e=vt.cache[o]))){if(e.events)for(i in e.events)r[i]?Z.event.remove(n,i):Z.removeEvent(n,i,e.handle);vt.cache[o]&&delete vt.cache[o]}delete yt.cache[n[yt.expando]]}}}),Z.fn.extend({text:function(t){return gt(this,function(t){return void 0===t?Z.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?Z.filter(t,this):this,o=0;null!=(n=i[o]);o++)e||1!==n.nodeType||Z.cleanData(v(n)),n.parentNode&&(e&&Z.contains(n.ownerDocument,n)&&m(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(Z.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return Z.clone(this,t,e)})},html:function(t){return gt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ut.test(t)&&!qt[(At.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Nt,"<$1></$2>");try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(Z.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,Z.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=_.apply([],t);var n,i,o,r,s,a,l=0,u=this.length,c=this,d=u-1,h=t[0],m=Z.isFunction(h);if(m||u>1&&"string"==typeof h&&!Q.checkClone&&It.test(h))return this.each(function(n){var i=c.eq(n);m&&(t[0]=h.call(this,n,i.html())),i.domManip(t,e)});if(u&&(n=Z.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(o=Z.map(v(n,"script"),f),r=o.length;l<u;l++)s=n,l!==d&&(s=Z.clone(s,!0,!0),r&&Z.merge(o,v(s,"script"))),e.call(this[l],s,l);if(r)for(a=o[o.length-1].ownerDocument,Z.map(o,p),l=0;l<r;l++)s=o[l],Lt.test(s.type||"")&&!vt.access(s,"globalEval")&&Z.contains(a,s)&&(s.src?Z._evalUrl&&Z._evalUrl(s.src):Z.globalEval(s.textContent.replace(Ht,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){Z.fn[t]=function(t){for(var n,i=[],o=Z(t),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),Z(o[s])[e](n),B.apply(i,n.get());return this.pushStack(i)}});var Pt,Ft={},Rt=/^margin/,Wt=new RegExp("^("+kt+")(?!px)[a-z%]+$","i"),zt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",o.appendChild(r);var e=t.getComputedStyle(s,null);n="1%"!==e.top,i="4px"===e.width,o.removeChild(r)}var n,i,o=J.documentElement,r=J.createElement("div"),s=J.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===s.style.backgroundClip,r.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",r.appendChild(s),t.getComputedStyle&&Z.extend(Q,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},reliableMarginRight:function(){var e,n=s.appendChild(J.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",o.appendChild(r),e=!parseFloat(t.getComputedStyle(n,null).marginRight),o.removeChild(r),s.removeChild(n),e}}))}(),Z.swap=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];o=n.apply(t,i||[]);for(r in e)t.style[r]=s[r];return o};var _t=/^(none|table(?!-c[ea]).+)/,Bt=new RegExp("^("+kt+")(.*)$","i"),Xt=new RegExp("^([+-])=("+kt+")","i"),Vt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=k(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=Z.camelCase(e),l=t.style;return e=Z.cssProps[a]||(Z.cssProps[a]=C(l,a)),s=Z.cssHooks[e]||Z.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:l[e]:(r=typeof n,"string"===r&&(o=Xt.exec(n))&&(n=(o[1]+1)*o[2]+parseFloat(Z.css(t,e)),r="number"),null!=n&&n===n&&("number"!==r||Z.cssNumber[a]||(n+="px"),Q.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n)),void 0)}},css:function(t,e,n,i){var o,r,s,a=Z.camelCase(e);return e=Z.cssProps[a]||(Z.cssProps[a]=C(t.style,a)),s=Z.cssHooks[e]||Z.cssHooks[a],s&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=k(t,e,i)),"normal"===o&&e in Yt&&(o=Yt[e]),""===n||n?(r=parseFloat(o),n===!0||Z.isNumeric(r)?r||0:o):o}}),Z.each(["height","width"],function(t,e){Z.cssHooks[e]={get:function(t,n,i){if(n)return _t.test(Z.css(t,"display"))&&0===t.offsetWidth?Z.swap(t,Vt,function(){return E(t,e,i)}):E(t,e,i)},set:function(t,n,i){var o=i&&zt(t);return T(t,n,i?$(t,e,i,"border-box"===Z.css(t,"boxSizing",!1,o),o):0)}}}),Z.cssHooks.marginRight=x(Q.reliableMarginRight,function(t,e){if(e)return Z.swap(t,{display:"inline-block"},k,[t,"marginRight"])}),Z.each({margin:"",padding:"",border:"Width"},function(t,e){Z.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+xt[i]+e]=r[i]||r[i-2]||r[0];return o}},Rt.test(t)||(Z.cssHooks[t+e].set=T)}),Z.fn.extend({css:function(t,e){return gt(this,function(t,e,n){var i,o,r={},s=0;if(Z.isArray(e)){for(i=zt(t),o=e.length;s<o;s++)r[e[s]]=Z.css(t,e[s],!1,i);return r}return void 0!==n?Z.style(t,e,n):Z.css(t,e)},t,e,arguments.length>1)},show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ct(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=D,D.prototype={constructor:D,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(Z.cssNumber[n]?"":"px")},cur:function(){var t=D.propHooks[this.prop];return t&&t.get?t.get(this):D.propHooks._default.get(this)},run:function(t){var e,n=D.propHooks[this.prop];return this.options.duration?this.pos=e=Z.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=Z.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){Z.fx.step[t.prop]?Z.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[Z.cssProps[t.prop]]||Z.cssHooks[t.prop])?Z.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},Z.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},Z.fx=D.prototype.init,Z.fx.step={};var Qt,Jt,Kt=/^(?:toggle|show|hide)$/,Zt=new RegExp("^(?:([+-])=|)("+kt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[M],ne={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),o=Zt.exec(e),r=o&&o[3]||(Z.cssNumber[t]?"":"px"),s=(Z.cssNumber[t]||"px"!==r&&+i)&&Zt.exec(Z.css(n.elem,t)),a=1,l=20;if(s&&s[3]!==r){r=r||s[3],o=o||[],s=+i||1;do a=a||".5",s/=a,Z.style(n.elem,t,s+r);while(a!==(a=n.cur()/i)&&1!==a&&--l)}return o&&(s=n.start=+s||+i||0,n.unit=r,n.end=o[1]?s+(o[1]+1)*o[2]:+o[2]),n}]};Z.Animation=Z.extend(I,{tweener:function(t,e){Z.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,o=t.length;i<o;i++)n=t[i],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),Z.speed=function(t,e,n){var i=t&&"object"==typeof t?Z.extend({},t):{complete:n||!n&&e||Z.isFunction(t)&&t,duration:t,easing:n&&e||e&&!Z.isFunction(e)&&e};return i.duration=Z.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in Z.fx.speeds?Z.fx.speeds[i.duration]:Z.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){Z.isFunction(i.old)&&i.old.call(this),i.queue&&Z.dequeue(this,i.queue)},i},Z.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Ct).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=Z.isEmptyObject(t),r=Z.speed(e,n,i),s=function(){var e=I(this,Z.extend({},t),r);(o||vt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||r.queue===!1?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=Z.timers,s=vt.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&te.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||Z.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=vt.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=Z.timers,s=i?i.length:0;for(n.finish=!0,Z.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(t,e){var n=Z.fn[e];Z.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(N(e,!0),t,i,o)}}),Z.each({slideDown:N("show"),slideUp:N("hide"),slideToggle:N("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){Z.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),Z.timers=[],Z.fx.tick=function(){var t,e=0,n=Z.timers;for(Qt=Z.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||Z.fx.stop(),Qt=void 0},Z.fx.timer=function(t){Z.timers.push(t),t()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Jt||(Jt=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Jt),Jt=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(t,e){return t=Z.fx?Z.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=J.createElement("input"),e=J.createElement("select"),n=e.appendChild(J.createElement("option"));t.type="checkbox",Q.checkOn=""!==t.value,Q.optSelected=n.selected,e.disabled=!0,Q.optDisabled=!n.disabled,t=J.createElement("input"),t.value="t",t.type="radio",Q.radioValue="t"===t.value}();var ie,oe,re=Z.expr.attrHandle;Z.fn.extend({attr:function(t,e){return gt(this,Z.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){Z.removeAttr(this,t)})}}),Z.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(t&&3!==r&&8!==r&&2!==r)return typeof t.getAttribute===$t?Z.prop(t,e,n):(1===r&&Z.isXMLDoc(t)||(e=e.toLowerCase(),i=Z.attrHooks[e]||(Z.expr.match.bool.test(e)?oe:ie)),void 0===n?i&&"get"in i&&null!==(o=i.get(t,e))?o:(o=Z.find.attr(t,e),null==o?void 0:o):null!==n?i&&"set"in i&&void 0!==(o=i.set(t,n,e))?o:(t.setAttribute(e,n+""),n):void Z.removeAttr(t,e))},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(ft);if(r&&1===t.nodeType)for(;n=r[o++];)i=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!Q.radioValue&&"radio"===e&&Z.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),oe={set:function(t,e,n){return e===!1?Z.removeAttr(t,n):t.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(t,e){var n=re[e]||Z.find.attr;re[e]=function(t,e,i){var o,r;return i||(r=re[e],re[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,re[e]=r),o}});var se=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(t,e){return gt(this,Z.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[Z.propFix[t]||t]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,o,r,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return r=1!==s||!Z.isXMLDoc(t),r&&(e=Z.propFix[e]||e,o=Z.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||se.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),Q.optSelected||(Z.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var ae=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(t){var e,n,i,o,r,s,a="string"==typeof t&&t,l=0,u=this.length;if(Z.isFunction(t))return this.each(function(e){Z(this).addClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ft)||[];l<u;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):" ")){for(r=0;o=e[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s=Z.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,o,r,s,a=0===arguments.length||"string"==typeof t&&t,l=0,u=this.length;if(Z.isFunction(t))return this.each(function(e){Z(this).removeClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ft)||[];l<u;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):"")){for(r=0;o=e[r++];)for(;i.indexOf(" "+o+" ")>=0;)i=i.replace(" "+o+" "," ");s=t?Z.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):Z.isFunction(t)?this.each(function(n){Z(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var e,i=0,o=Z(this),r=t.match(ft)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else n!==$t&&"boolean"!==n||(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;n<i;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(ae," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;Z.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=Z.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(o=i?t.call(this,n,Z(this).val()):t,null==o?o="":"number"==typeof o?o+="":Z.isArray(o)&&(o=Z.map(o,function(t){return null==t?"":t+""})),e=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return e=Z.valHooks[o.type]||Z.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(le,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(t){var e=Z.find.attr(t,"value");return null!=e?e:Z.trim(Z.text(t))}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(n=i[l],(n.selected||l===o)&&(Q.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!Z.nodeName(n.parentNode,"optgroup"))){if(e=Z(n).val(),r)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,r=Z.makeArray(e),s=o.length;s--;)i=o[s],(i.selected=Z.inArray(i.value,r)>=0)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(t,e){if(Z.isArray(e))return t.checked=Z.inArray(Z(t).val(),e)>=0}},Q.checkOn||(Z.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){Z.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),Z.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ue=Z.now(),ce=/\?/;Z.parseJSON=function(t){return JSON.parse(t+"")},Z.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(i){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||Z.error("Invalid XML: "+t),e};var de=/#.*$/,he=/([?&])_=[^&]*/,fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,me=/^(?:GET|HEAD)$/,ge=/^\/\//,ve=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},we={},be="*/".concat("*"),ke=t.location.href,xe=ve.exec(ke.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke,type:"GET",isLocal:pe.test(xe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?H(H(t,Z.ajaxSettings),e):H(Z.ajaxSettings,t)},ajaxPrefilter:L(ye),ajaxTransport:L(we),ajax:function(t,e){function n(t,e,n,s){var l,c,v,y,b,x=e;2!==w&&(w=2,a&&clearTimeout(a),i=void 0,r=s||"",k.readyState=t>0?4:0,l=t>=200&&t<300||304===t,n&&(y=q(d,k,n)),y=P(d,y,k,l),l?(d.ifModified&&(b=k.getResponseHeader("Last-Modified"),b&&(Z.lastModified[o]=b),b=k.getResponseHeader("etag"),b&&(Z.etag[o]=b)),204===t||"HEAD"===d.type?x="nocontent":304===t?x="notmodified":(x=y.state,c=y.data,v=y.error,l=!v)):(v=x,!t&&x||(x="error",t<0&&(t=0))),k.status=t,k.statusText=(e||x)+"",l?p.resolveWith(h,[c,x,k]):p.rejectWith(h,[k,x,v]),k.statusCode(g),g=void 0,u&&f.trigger(l?"ajaxSuccess":"ajaxError",[k,d,l?c:v]),m.fireWith(h,[k,x]),u&&(f.trigger("ajaxComplete",[k,d]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o,r,s,a,l,u,c,d=Z.ajaxSetup({},e),h=d.context||d,f=d.context&&(h.nodeType||h.jquery)?Z(h):Z.event,p=Z.Deferred(),m=Z.Callbacks("once memory"),g=d.statusCode||{},v={},y={},w=0,b="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!s)for(s={};e=fe.exec(r);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?r:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=y[n]=y[n]||t,v[t]=e),this},overrideMimeType:function(t){return w||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)g[e]=[g[e],t[e]];else k.always(t[k.status]);return this},abort:function(t){var e=t||b;return i&&i.abort(e),n(0,e),this}};if(p.promise(k).complete=m.add,k.success=k.done,k.error=k.fail,d.url=((t||d.url||ke)+"").replace(de,"").replace(ge,xe[1]+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=Z.trim(d.dataType||"*").toLowerCase().match(ft)||[""],null==d.crossDomain&&(l=ve.exec(d.url.toLowerCase()),d.crossDomain=!(!l||l[1]===xe[1]&&l[2]===xe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(xe[3]||("http:"===xe[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=Z.param(d.data,d.traditional)),O(ye,d,e,k),2===w)return k;u=Z.event&&d.global,u&&0===Z.active++&&Z.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!me.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(ce.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=he.test(o)?o.replace(he,"$1_="+ue++):o+(ce.test(o)?"&":"?")+"_="+ue++)),d.ifModified&&(Z.lastModified[o]&&k.setRequestHeader("If-Modified-Since",Z.lastModified[o]),Z.etag[o]&&k.setRequestHeader("If-None-Match",Z.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&k.setRequestHeader("Content-Type",d.contentType),k.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+be+"; q=0.01":""):d.accepts["*"]);for(c in d.headers)k.setRequestHeader(c,d.headers[c]);if(d.beforeSend&&(d.beforeSend.call(h,k,d)===!1||2===w))return k.abort();b="abort";for(c in{success:1,error:1,complete:1})k[c](d[c]);if(i=O(we,d,e,k)){k.readyState=1,u&&f.trigger("ajaxSend",[k,d]),d.async&&d.timeout>0&&(a=setTimeout(function(){k.abort("timeout")},d.timeout));try{w=1,i.send(v,n)}catch(x){if(!(w<2))throw x;n(-1,x)}}else n(-1,"No Transport");return k},getJSON:function(t,e,n){return Z.get(t,e,n,"json")},getScript:function(t,e){return Z.get(t,void 0,e,"script")}}),Z.each(["get","post"],function(t,e){Z[e]=function(t,n,i,o){return Z.isFunction(n)&&(o=o||i,i=n,n=void 0),Z.ajax({url:t,type:e,dataType:o,data:n,success:i})}}),Z._evalUrl=function(t){return Z.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(t){var e;return Z.isFunction(t)?this.each(function(e){Z(this).wrapAll(t.call(this,e))}):(this[0]&&(e=Z(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return Z.isFunction(t)?this.each(function(e){Z(this).wrapInner(t.call(this,e))}):this.each(function(){var e=Z(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=Z.isFunction(t);return this.each(function(n){Z(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},Z.expr.filters.visible=function(t){return!Z.expr.filters.hidden(t)};var Ce=/%20/g,Te=/\[\]$/,$e=/\r?\n/g,Ee=/^(?:submit|button|image|reset|file)$/i,Se=/^(?:input|select|textarea|keygen)/i;Z.param=function(t,e){var n,i=[],o=function(t,e){e=Z.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(t)||t.jquery&&!Z.isPlainObject(t))Z.each(t,function(){o(this.name,this.value)});else for(n in t)F(n,t[n],e,o);return i.join("&").replace(Ce,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=Z.prop(this,"elements");return t?Z.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!Z(this).is(":disabled")&&Se.test(this.nodeName)&&!Ee.test(t)&&(this.checked||!Tt.test(t))}).map(function(t,e){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(t){return{name:e.name,value:t.replace($e,"\r\n")}}):{name:e.name,value:n.replace($e,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var De=0,je={},Ne={0:200,1223:204},Ae=Z.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in je)je[t]()}),Q.cors=!!Ae&&"withCredentials"in Ae,Q.ajax=Ae=!!Ae,Z.ajaxTransport(function(t){var e;if(Q.cors||Ae&&!t.crossDomain)return{send:function(n,i){var o,r=t.xhr(),s=++De;if(r.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)r[o]=t.xhrFields[o];t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(o in n)r.setRequestHeader(o,n[o]);e=function(t){return function(){e&&(delete je[s],e=r.onload=r.onerror=null,"abort"===t?r.abort():"error"===t?i(r.status,r.statusText):i(Ne[r.status]||r.status,r.statusText,"string"==typeof r.responseText?{text:r.responseText}:void 0,r.getAllResponseHeaders()))}},r.onload=e(),r.onerror=e("error"),e=je[s]=e("abort");try{r.send(t.hasContent&&t.data||null)}catch(a){if(e)throw a}},abort:function(){e&&e()}}}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return Z.globalEval(t),t}}}),Z.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),Z.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,o){e=Z("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),J.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Me=[],Ue=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Me.pop()||Z.expando+"_"+ue++;return this[t]=!0,t}}),Z.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=e.jsonp!==!1&&(Ue.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ue.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=Z.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ue,"$1"+o):e.jsonp!==!1&&(e.url+=(ce.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||Z.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always(function(){t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,Me.push(o)),s&&Z.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),Z.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||J;var i=st.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=Z.buildFragment([t],e,o),o&&o.length&&Z(o).remove(),Z.merge([],i.childNodes))};var Ie=Z.fn.load;Z.fn.load=function(t,e,n){if("string"!=typeof t&&Ie)return Ie.apply(this,arguments);var i,o,r,s=this,a=t.indexOf(" ");return a>=0&&(i=Z.trim(t.slice(a)),t=t.slice(0,a)),Z.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&Z.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?Z("<div>").append(Z.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){s.each(n,r||[t.responseText,e,t])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){Z.fn[e]=function(t){return this.on(e,t)}}),Z.expr.filters.animated=function(t){return Z.grep(Z.timers,function(e){return t===e.elem}).length};var Le=t.document.documentElement;Z.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,u,c=Z.css(t,"position"),d=Z(t),h={};"static"===c&&(t.style.position="relative"),a=d.offset(),r=Z.css(t,"top"),l=Z.css(t,"left"),u=("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1,u?(i=d.position(),s=i.top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),Z.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+o),"using"in e?e.using.call(t,h):d.css(h)}},Z.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){Z.offset.setOffset(this,t,e)});var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;if(r)return e=r.documentElement,Z.contains(e,i)?(typeof i.getBoundingClientRect!==$t&&(o=i.getBoundingClientRect()),n=R(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===Z.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),Z.nodeName(t[0],"html")||(i=t.offset()),i.top+=Z.css(t[0],"borderTopWidth",!0),i.left+=Z.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-Z.css(n,"marginTop",!0),left:e.left-i.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Le;t&&!Z.nodeName(t,"html")&&"static"===Z.css(t,"position");)t=t.offsetParent;return t||Le})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;Z.fn[e]=function(o){return gt(this,function(e,o,r){var s=R(e);return void 0===r?s?s[n]:e[o]:void(s?s.scrollTo(i?t.pageXOffset:r,i?r:t.pageYOffset):e[o]=r)},e,o,arguments.length,null)}}),Z.each(["top","left"],function(t,e){Z.cssHooks[e]=x(Q.pixelPosition,function(t,n){if(n)return n=k(t,e),Wt.test(n)?Z(t).position()[e]+"px":n})}),Z.each({Height:"height",Width:"width"},function(t,e){Z.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){Z.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||o===!0?"margin":"border");return gt(this,function(e,n,i){var o;return Z.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?Z.css(e,n,s):Z.style(e,n,i,s)},e,r?i:void 0,r,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var Oe=t.jQuery,He=t.$;return Z.noConflict=function(e){return t.$===Z&&(t.$=He),e&&t.jQuery===Z&&(t.jQuery=Oe),Z},typeof e===$t&&(t.jQuery=t.$=Z),Z}),function(t){if("function"==typeof define&&define.amd&&define("uikit",function(){var e=window.UIkit||t(window,window.jQuery,window.document);return e.load=function(t,n,i,o){var r,s=t.split(","),a=[],l=(o.config&&o.config.uikit&&o.config.uikit.base?o.config.uikit.base:"").replace(/\/+$/g,"");if(!l)throw new Error("Please define base path to UIkit in the requirejs config.");for(r=0;r<s.length;r+=1){var u=s[r].replace(/\./g,"/");a.push(l+"/components/"+u)}n(a,function(){i(e)})},e}),!window.jQuery)throw new Error("UIkit requires jQuery");window&&window.jQuery&&t(window,window.jQuery,window.document)}(function(t,e,n){"use strict";var i={},o=t.UIkit?Object.create(t.UIkit):void 0;if(i.version="2.27.1",i.noConflict=function(){return o&&(t.UIkit=o,e.UIkit=o,e.fn.uk=o.fn),i},i.prefix=function(t){return t},i.$=e,i.$doc=i.$(document),
i.$win=i.$(window),i.$html=i.$("html"),i.support={},i.support.transition=function(){var t=function(){var t,e=n.body||n.documentElement,i={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in i)if(void 0!==e.style[t])return i[t]}();return t&&{end:t}}(),i.support.animation=function(){var t=function(){var t,e=n.body||n.documentElement,i={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(t in i)if(void 0!==e.style[t])return i[t]}();return t&&{end:t}}(),function(){Date.now=Date.now||function(){return(new Date).getTime()};for(var t=["webkit","moz"],e=0;e<t.length&&!window.requestAnimationFrame;++e){var n=t[e];window.requestAnimationFrame=window[n+"RequestAnimationFrame"],window.cancelAnimationFrame=window[n+"CancelAnimationFrame"]||window[n+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var i=0;window.requestAnimationFrame=function(t){var e=Date.now(),n=Math.max(i+16,e);return setTimeout(function(){t(i=n)},n-e)},window.cancelAnimationFrame=clearTimeout}}(),i.support.touch="ontouchstart"in document||t.DocumentTouch&&document instanceof t.DocumentTouch||t.navigator.msPointerEnabled&&t.navigator.msMaxTouchPoints>0||t.navigator.pointerEnabled&&t.navigator.maxTouchPoints>0||!1,i.support.mutationobserver=t.MutationObserver||t.WebKitMutationObserver||null,i.Utils={},i.Utils.isFullscreen=function(){return document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.fullscreenElement||!1},i.Utils.str2json=function(t,e){try{return e?JSON.parse(t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})):new Function("","var json = "+t+"; return JSON.parse(JSON.stringify(json));")()}catch(n){return!1}},i.Utils.debounce=function(t,e,n){var i;return function(){var o=this,r=arguments,s=function(){i=null,n||t.apply(o,r)},a=n&&!i;clearTimeout(i),i=setTimeout(s,e),a&&t.apply(o,r)}},i.Utils.throttle=function(t,e){var n=!1;return function(){n||(t.call(),n=!0,setTimeout(function(){n=!1},e))}},i.Utils.removeCssRules=function(t){var e,n,i,o,r,s,a,l,u,c;t&&setTimeout(function(){try{for(c=document.styleSheets,o=0,a=c.length;o<a;o++){for(i=c[o],n=[],i.cssRules=i.cssRules,e=r=0,l=i.cssRules.length;r<l;e=++r)i.cssRules[e].type===CSSRule.STYLE_RULE&&t.test(i.cssRules[e].selectorText)&&n.unshift(e);for(s=0,u=n.length;s<u;s++)i.deleteRule(n[s])}}catch(d){}},0)},i.Utils.isInView=function(t,n){var o=e(t);if(!o.is(":visible"))return!1;var r=i.$win.scrollLeft(),s=i.$win.scrollTop(),a=o.offset(),l=a.left,u=a.top;return n=e.extend({topoffset:0,leftoffset:0},n),u+o.height()>=s&&u-n.topoffset<=s+i.$win.height()&&l+o.width()>=r&&l-n.leftoffset<=r+i.$win.width()},i.Utils.checkDisplay=function(t,n){var o=i.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]",t||document);return t&&!o.length&&(o=e(t)),o.trigger("display.uk.check"),n&&("string"!=typeof n&&(n='[class*="uk-animation-"]'),o.find(n).each(function(){var t=i.$(this),e=t.attr("class"),n=e.match(/uk-animation-(.+)/);t.removeClass(n[0]).width(),t.addClass(n[0])})),o},i.Utils.options=function(t){if("string"!=e.type(t))return t;t.indexOf(":")!=-1&&"}"!=t.trim().substr(-1)&&(t="{"+t+"}");var n=t?t.indexOf("{"):-1,o={};if(n!=-1)try{o=i.Utils.str2json(t.substr(n))}catch(r){}return o},i.Utils.animate=function(t,n){var o=e.Deferred();return t=i.$(t),t.css("display","none").addClass(n).one(i.support.animation.end,function(){t.removeClass(n),o.resolve()}),t.css("display",""),o.promise()},i.Utils.uid=function(t){return(t||"id")+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random())},i.Utils.template=function(t,e){for(var n,i,o,r,s=t.replace(/\n/g,"\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g,"{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g),a=0,l=[],u=0;a<s.length;){if(n=s[a],n.match(/\{\{\s*(.+?)\s*\}\}/))switch(a+=1,n=s[a],i=n[0],o=n.substring(n.match(/^(\^|\#|\!|\~|\:)/)?1:0),i){case"~":l.push("for(var $i=0;$i<"+o+".length;$i++) { var $item = "+o+"[$i];"),u++;break;case":":l.push("for(var $key in "+o+") { var $val = "+o+"[$key];"),u++;break;case"#":l.push("if("+o+") {"),u++;break;case"^":l.push("if(!"+o+") {"),u++;break;case"/":l.push("}"),u--;break;case"!":l.push("__ret.push("+o+");");break;default:l.push("__ret.push(escape("+o+"));")}else l.push("__ret.push('"+n.replace(/\'/g,"\\'")+"');");a+=1}return r=new Function("$data",["var __ret = [];","try {","with($data){",u?'__ret = ["Not all blocks are closed correctly."]':l.join(""),"};","}catch(e){__ret = [e.message];}",'return __ret.join("").replace(/\\n\\n/g, "\\n");',"function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}"].join("\n")),e?r(e):r},i.Utils.focus=function(t,n){t=e(t);var i,o=t.find("[autofocus]:first");return o.length?o.focus():(o=t.find(":input"+(n&&","+n||"")).first(),o.length?o.focus():(t.attr("tabindex")||(i=1e3,t.attr("tabindex",i)),t[0].focus(),i&&t.attr("tabindex",""),t))},i.Utils.events={},i.Utils.events.click=i.support.touch?"tap":"click",t.UIkit=i,i.fn=function(t,n){var o=arguments,r=t.match(/^([a-z\-]+)(?:\.([a-z]+))?/i),s=r[1],a=r[2];return i[s]?this.each(function(){var t=e(this),r=t.data(s);r||t.data(s,r=i[s](this,a?void 0:n)),a&&r[a].apply(r,Array.prototype.slice.call(o,1))}):(e.error("UIkit component ["+s+"] does not exist."),this)},e.UIkit=i,e.fn.uk=i.fn,i.langdirection="rtl"==i.$html.attr("dir")?"right":"left",i.components={},i.component=function(t,n){var o=function(n,r){var s=this;return this.UIkit=i,this.element=n?i.$(n):null,this.options=e.extend(!0,{},this.defaults,r),this.plugins={},this.element&&this.element.data(t,this),this.init(),(this.options.plugins.length?this.options.plugins:Object.keys(o.plugins)).forEach(function(t){o.plugins[t].init&&(o.plugins[t].init(s),s.plugins[t]=!0)}),this.trigger("init.uk.component",[t,this]),this};return o.plugins={},e.extend(!0,o.prototype,{defaults:{plugins:[]},boot:function(){},init:function(){},on:function(t,e,n){return i.$(this.element||this).on(t,e,n)},one:function(t,e,n){return i.$(this.element||this).one(t,e,n)},off:function(t){return i.$(this.element||this).off(t)},trigger:function(t,e){return i.$(this.element||this).trigger(t,e)},find:function(t){return i.$(this.element?this.element:[]).find(t)},proxy:function(t,e){var n=this;e.split(" ").forEach(function(e){n[e]||(n[e]=function(){return t[e].apply(t,arguments)})})},mixin:function(t,e){var n=this;e.split(" ").forEach(function(e){n[e]||(n[e]=t[e].bind(n))})},option:function(){return 1==arguments.length?this.options[arguments[0]]||void 0:void(2==arguments.length&&(this.options[arguments[0]]=arguments[1]))}},n),this.components[t]=o,this[t]=function(){var n,o;if(arguments.length)switch(arguments.length){case 1:"string"==typeof arguments[0]||arguments[0].nodeType||arguments[0]instanceof jQuery?n=e(arguments[0]):o=arguments[0];break;case 2:n=e(arguments[0]),o=arguments[1]}return n&&n.data(t)?n.data(t):new i.components[t](n,o)},i.domready&&i.component.boot(t),o},i.plugin=function(t,e,n){this.components[t].plugins[e]=n},i.component.boot=function(t){i.components[t].prototype&&i.components[t].prototype.boot&&!i.components[t].booted&&(i.components[t].prototype.boot.apply(i,[]),i.components[t].booted=!0)},i.component.bootComponents=function(){for(var t in i.components)i.component.boot(t)},i.domObservers=[],i.domready=!1,i.ready=function(t){i.domObservers.push(t),i.domready&&t(document)},i.on=function(t,e,n){return t&&t.indexOf("ready.uk.dom")>-1&&i.domready&&e.apply(i.$doc),i.$doc.on(t,e,n)},i.one=function(t,e,n){return t&&t.indexOf("ready.uk.dom")>-1&&i.domready?(e.apply(i.$doc),i.$doc):i.$doc.one(t,e,n)},i.trigger=function(t,e){return i.$doc.trigger(t,e)},i.domObserve=function(t,e){i.support.mutationobserver&&(e=e||function(){},i.$(t).each(function(){var t=this,n=i.$(t);if(!n.data("observer"))try{var o=new i.support.mutationobserver(i.Utils.debounce(function(i){e.apply(t,[n]),n.trigger("changed.uk.dom")},50),{childList:!0,subtree:!0});o.observe(t,{childList:!0,subtree:!0}),n.data("observer",o)}catch(r){}}))},i.init=function(t){t=t||document,i.domObservers.forEach(function(e){e(t)})},i.on("domready.uk.dom",function(){i.init(),i.domready&&i.Utils.checkDisplay()}),document.addEventListener("DOMContentLoaded",function(){var t=function(){i.$body=i.$("body"),i.trigger("beforeready.uk.dom"),i.component.bootComponents();var t=requestAnimationFrame(function(){var e={dir:{x:0,y:0},x:window.pageXOffset,y:window.pageYOffset},n=function(){var o=window.pageXOffset,r=window.pageYOffset;e.x==o&&e.y==r||(o!=e.x?e.dir.x=o>e.x?1:-1:e.dir.x=0,r!=e.y?e.dir.y=r>e.y?1:-1:e.dir.y=0,e.x=o,e.y=r,i.$doc.trigger("scrolling.uk.document",[{dir:{x:e.dir.x,y:e.dir.y},x:o,y:r}])),cancelAnimationFrame(t),t=requestAnimationFrame(n)};return i.support.touch&&i.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup",n),(e.x||e.y)&&n(),n}());if(i.trigger("domready.uk.dom"),i.support.touch&&navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&i.$win.on("load orientationchange resize",i.Utils.debounce(function(){var t=function(){return e(".uk-height-viewport").css("height",window.innerHeight),t};return t()}(),100)),i.trigger("afterready.uk.dom"),i.domready=!0,i.support.mutationobserver){var n=i.Utils.debounce(function(){requestAnimationFrame(function(){i.init(document.body)})},10);new i.support.mutationobserver(function(t){var e=!1;t.every(function(t){if("childList"!=t.type)return!0;for(var n,i=0;i<t.addedNodes.length;++i)if(n=t.addedNodes[i],n.outerHTML&&n.outerHTML.indexOf("data-uk-")!==-1)return(e=!0)&&!1;return!0}),e&&n()}).observe(document.body,{childList:!0,subtree:!0})}};return"complete"!=document.readyState&&"interactive"!=document.readyState||setTimeout(t),t}()),i.$html.addClass(i.support.touch?"uk-touch":"uk-notouch"),i.support.touch){var r,s=!1,a="uk-hover",l=".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";i.$html.on("mouseenter touchstart MSPointerDown pointerdown",l,function(){s&&e("."+a).removeClass(a),s=e(this).addClass(a)}).on("mouseleave touchend MSPointerUp pointerup",function(t){r=e(t.target).parents(l),s&&s.not(r).removeClass(a)})}return i}),function(t){function e(t,e,n,i){return Math.abs(t-e)>=Math.abs(n-i)?t-e>0?"Left":"Right":n-i>0?"Up":"Down"}function n(){u=null,d.last&&(void 0!==d.el&&d.el.trigger("longTap"),d={})}function i(){u&&clearTimeout(u),u=null}function o(){s&&clearTimeout(s),a&&clearTimeout(a),l&&clearTimeout(l),u&&clearTimeout(u),s=a=l=u=null,d={}}function r(t){return t.pointerType==t.MSPOINTER_TYPE_TOUCH&&t.isPrimary}if(!t.fn.swipeLeft){var s,a,l,u,c,d={},h=750;t(function(){var f,p,m,g=0,v=0;"MSGesture"in window&&(c=new MSGesture,c.target=document.body),t(document).on("MSGestureEnd gestureend",function(t){var e=t.originalEvent.velocityX>1?"Right":t.originalEvent.velocityX<-1?"Left":t.originalEvent.velocityY>1?"Down":t.originalEvent.velocityY<-1?"Up":null;e&&void 0!==d.el&&(d.el.trigger("swipe"),d.el.trigger("swipe"+e))}).on("touchstart MSPointerDown pointerdown",function(e){("MSPointerDown"!=e.type||r(e.originalEvent))&&(m="MSPointerDown"==e.type||"pointerdown"==e.type?e:e.originalEvent.touches[0],f=Date.now(),p=f-(d.last||f),d.el=t("tagName"in m.target?m.target:m.target.parentNode),s&&clearTimeout(s),d.x1=m.pageX,d.y1=m.pageY,p>0&&p<=250&&(d.isDoubleTap=!0),d.last=f,u=setTimeout(n,h),!c||"MSPointerDown"!=e.type&&"pointerdown"!=e.type&&"touchstart"!=e.type||c.addPointer(e.originalEvent.pointerId))}).on("touchmove MSPointerMove pointermove",function(t){("MSPointerMove"!=t.type||r(t.originalEvent))&&(m="MSPointerMove"==t.type||"pointermove"==t.type?t:t.originalEvent.touches[0],i(),d.x2=m.pageX,d.y2=m.pageY,g+=Math.abs(d.x1-d.x2),v+=Math.abs(d.y1-d.y2))}).on("touchend MSPointerUp pointerup",function(n){("MSPointerUp"!=n.type||r(n.originalEvent))&&(i(),d.x2&&Math.abs(d.x1-d.x2)>30||d.y2&&Math.abs(d.y1-d.y2)>30?l=setTimeout(function(){void 0!==d.el&&(d.el.trigger("swipe"),d.el.trigger("swipe"+e(d.x1,d.x2,d.y1,d.y2))),d={}},0):"last"in d&&(isNaN(g)||g<30&&v<30?a=setTimeout(function(){var e=t.Event("tap");e.cancelTouch=o,void 0!==d.el&&d.el.trigger(e),d.isDoubleTap?(void 0!==d.el&&d.el.trigger("doubleTap"),d={}):s=setTimeout(function(){s=null,void 0!==d.el&&d.el.trigger("singleTap"),d={}},250)},0):d={},g=v=0))}).on("touchcancel MSPointerCancel pointercancel",o),t(window).on("scroll",o)}),["swipe","swipeLeft","swipeRight","swipeUp","swipeDown","doubleTap","tap","singleTap","longTap"].forEach(function(e){t.fn[e]=function(n){return t(this).on(e,n)}})}}(jQuery),function(t){"use strict";var e=[];t.component("stackMargin",{defaults:{cls:"uk-margin-small-top",rowfirst:!1,observe:!1},boot:function(){t.ready(function(e){t.$("[data-uk-margin]",e).each(function(){var e=t.$(this);e.data("stackMargin")||t.stackMargin(e,t.Utils.options(e.attr("data-uk-margin")))})})},init:function(){var n=this;t.$win.on("resize orientationchange",function(){var e=function(){n.process()};return t.$(function(){e(),t.$win.on("load",e)}),t.Utils.debounce(e,20)}()),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.process()}.bind(this)),this.options.observe&&t.domObserve(this.element,function(t){n.element.is(":visible")&&n.process()}),e.push(this)},process:function(){var e=this.element.children();if(t.Utils.stackMargin(e,this.options),!this.options.rowfirst||!e.length)return this;var n={},i=!1;return e.removeClass(this.options.rowfirst).each(function(e,o){o=t.$(this),"none"!=this.style.display&&(e=o.offset().left,((n[e]=n[e]||[])&&n[e]).push(this),i=i===!1?e:Math.min(i,e))}),t.$(n[i]).addClass(this.options.rowfirst),this}}),function(){var e=[],n=function(t){if(t.is(":visible")){var e=t.parent().width(),n=t.data("width"),i=e/n,o=Math.floor(i*t.data("height"));t.css({height:e<n?o:t.data("height")})}};t.component("responsiveElement",{defaults:{},boot:function(){t.ready(function(e){t.$("iframe.uk-responsive-width, [data-uk-responsive]",e).each(function(){var e,n=t.$(this);n.data("responsiveElement")||(e=t.responsiveElement(n,{}))})})},init:function(){var t=this.element;t.attr("width")&&t.attr("height")&&(t.data({width:t.attr("width"),height:t.attr("height")}).on("display.uk.check",function(){n(t)}),n(t),e.push(t))}}),t.$win.on("resize load",t.Utils.debounce(function(){e.forEach(function(t){n(t)})},15))}(),t.Utils.stackMargin=function(e,n){n=t.$.extend({cls:"uk-margin-small-top"},n),e=t.$(e).removeClass(n.cls);var i=!1;e.each(function(e,n,o,r){r=t.$(this),"none"!=r.css("display")&&(e=r.offset(),n=r.outerHeight(),o=e.top+n,r.data({ukMarginPos:o,ukMarginTop:e.top}),(i===!1||e.top<i.top)&&(i={top:e.top,left:e.left,pos:o}))}).each(function(e){e=t.$(this),"none"!=e.css("display")&&e.data("ukMarginTop")>i.top&&e.data("ukMarginPos")>i.pos&&e.addClass(n.cls)})},t.Utils.matchHeights=function(e,n){e=t.$(e).css("min-height",""),n=t.$.extend({row:!0},n);var i=function(e){if(!(e.length<2)){var n=0;e.each(function(){n=Math.max(n,t.$(this).outerHeight())}).each(function(){var e=t.$(this),i=n-("border-box"==e.css("box-sizing")?0:e.outerHeight()-e.height());e.css("min-height",i+"px")})}};n.row?(e.first().width(),setTimeout(function(){var n=!1,o=[];e.each(function(){var e=t.$(this),r=e.offset().top;r!=n&&o.length&&(i(t.$(o)),o=[],r=e.offset().top),o.push(e),n=r}),o.length&&i(t.$(o))},0)):i(e)},function(e){t.Utils.inlineSvg=function(n,i){t.$(n||'img[src$=".svg"]',i||document).each(function(){var n=t.$(this),i=n.attr("src");if(!e[i]){var o=t.$.Deferred();t.$.get(i,{nc:Math.random()},function(e){o.resolve(t.$(e).find("svg"))}),e[i]=o.promise()}e[i].then(function(e){var i=t.$(e).clone();n.attr("id")&&i.attr("id",n.attr("id")),n.attr("class")&&i.attr("class",n.attr("class")),n.attr("style")&&i.attr("style",n.attr("style")),n.attr("width")&&(i.attr("width",n.attr("width")),n.attr("height")||i.removeAttr("height")),n.attr("height")&&(i.attr("height",n.attr("height")),n.attr("width")||i.removeAttr("width")),n.replaceWith(i)})})},t.ready(function(e){t.Utils.inlineSvg("[data-uk-svg]",e)})}({}),t.Utils.getCssVar=function(t){var e,n=document.documentElement,i=n.appendChild(document.createElement("div"));i.classList.add("var-"+t);try{e=JSON.parse(e=getComputedStyle(i,":before").content.replace(/^["'](.*)["']$/,"$1"))}catch(o){e=void 0}return n.removeChild(i),e}}(UIkit),function(t){"use strict";function e(e,n){n=t.$.extend({duration:1e3,transition:"easeOutExpo",offset:0,complete:function(){}},n);var i=e.offset().top-n.offset,o=t.$doc.height(),r=window.innerHeight;i+r>o&&(i=o-r),t.$("html,body").stop().animate({scrollTop:i},n.duration,n.transition).promise().done(n.complete)}t.component("smoothScroll",{boot:function(){t.$html.on("click.smooth-scroll.uikit","[data-uk-smooth-scroll]",function(e){var n=t.$(this);if(!n.data("smoothScroll")){t.smoothScroll(n,t.Utils.options(n.attr("data-uk-smooth-scroll")));n.trigger("click")}return!1})},init:function(){var n=this;this.on("click",function(i){i.preventDefault(),e(t.$(this.hash).length?t.$(this.hash):t.$("body"),n.options)})}}),t.Utils.scrollToElement=e,t.$.easing.easeOutExpo||(t.$.easing.easeOutExpo=function(t,e,n,i,o){return e==o?n+i:i*(-Math.pow(2,-10*e/o)+1)+n})}(UIkit),function(t){"use strict";var e=t.$win,n=t.$doc,i=[],o=function(){for(var t=0;t<i.length;t++)window.requestAnimationFrame.apply(window,[i[t].check])};t.component("scrollspy",{defaults:{target:!1,cls:"uk-scrollspy-inview",initcls:"uk-scrollspy-init-inview",topoffset:0,leftoffset:0,repeat:!1,delay:0},boot:function(){n.on("scrolling.uk.document",o),e.on("load resize orientationchange",t.Utils.debounce(o,50)),t.ready(function(e){t.$("[data-uk-scrollspy]",e).each(function(){var e=t.$(this);if(!e.data("scrollspy")){t.scrollspy(e,t.Utils.options(e.attr("data-uk-scrollspy")))}})})},init:function(){var e,n=this,o=this.options.cls.split(/,/),r=function(){var i=n.options.target?n.element.find(n.options.target):n.element,r=1===i.length?1:0,s=0;i.each(function(i){var a=t.$(this),l=a.data("inviewstate"),u=t.Utils.isInView(a,n.options),c=a.data("ukScrollspyCls")||o[s].trim();!u||l||a.data("scrollspy-idle")||(e||(a.addClass(n.options.initcls),n.offset=a.offset(),e=!0,a.trigger("init.uk.scrollspy")),a.data("scrollspy-idle",setTimeout(function(){a.addClass("uk-scrollspy-inview").toggleClass(c).width(),a.trigger("inview.uk.scrollspy"),a.data("scrollspy-idle",!1),a.data("inviewstate",!0)},n.options.delay*r)),r++),!u&&l&&n.options.repeat&&(a.data("scrollspy-idle")&&(clearTimeout(a.data("scrollspy-idle")),a.data("scrollspy-idle",!1)),a.removeClass("uk-scrollspy-inview").toggleClass(c),a.data("inviewstate",!1),a.trigger("outview.uk.scrollspy")),s=o[s+1]?s+1:0})};r(),this.check=r,i.push(this)}});var r=[],s=function(){for(var t=0;t<r.length;t++)window.requestAnimationFrame.apply(window,[r[t].check])};t.component("scrollspynav",{defaults:{cls:"uk-active",closest:!1,topoffset:0,leftoffset:0,smoothscroll:!1},boot:function(){n.on("scrolling.uk.document",s),e.on("resize orientationchange",t.Utils.debounce(s,50)),t.ready(function(e){t.$("[data-uk-scrollspy-nav]",e).each(function(){var e=t.$(this);if(!e.data("scrollspynav")){t.scrollspynav(e,t.Utils.options(e.attr("data-uk-scrollspy-nav")))}})})},init:function(){var n,i=[],o=this.find("a[href^='#']").each(function(){"#"!==this.getAttribute("href").trim()&&i.push(this.getAttribute("href"))}),s=t.$(i.join(",")),a=this.options.cls,l=this.options.closest||this.options.closest,u=this,c=function(){n=[];for(var i=0;i<s.length;i++)t.Utils.isInView(s.eq(i),u.options)&&n.push(s.eq(i));if(n.length){var r,c=e.scrollTop(),d=function(){for(var t=0;t<n.length;t++)if(n[t].offset().top-u.options.topoffset>=c)return n[t]}();if(!d)return;u.options.closest?(o.blur().closest(l).removeClass(a),r=o.filter("a[href='#"+d.attr("id")+"']").closest(l).addClass(a)):r=o.removeClass(a).filter("a[href='#"+d.attr("id")+"']").addClass(a),u.element.trigger("inview.uk.scrollspynav",[d,r])}};this.options.smoothscroll&&t.smoothScroll&&o.each(function(){t.smoothScroll(this,u.options.smoothscroll)}),c(),this.element.data("scrollspynav",this),this.check=c,r.push(this)}})}(UIkit),function(t){"use strict";var e=[];t.component("toggle",{defaults:{target:!1,cls:"uk-hidden",animation:!1,duration:200},boot:function(){t.ready(function(n){t.$("[data-uk-toggle]",n).each(function(){var e=t.$(this);if(!e.data("toggle")){t.toggle(e,t.Utils.options(e.attr("data-uk-toggle")))}}),setTimeout(function(){e.forEach(function(t){t.getToggles()})},0)})},init:function(){var t=this;this.aria=this.options.cls.indexOf("uk-hidden")!==-1,this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle()}),e.push(this)},toggle:function(){if(this.getToggles(),this.totoggle.length){if(this.options.animation&&t.support.animation){var e=this,n=this.options.animation.split(",");1==n.length&&(n[1]=n[0]),n[0]=n[0].trim(),n[1]=n[1].trim(),this.totoggle.css("animation-duration",this.options.duration+"ms"),this.totoggle.each(function(){var i=t.$(this);i.hasClass(e.options.cls)?(i.toggleClass(e.options.cls),t.Utils.animate(i,n[0]).then(function(){i.css("animation-duration",""),t.Utils.checkDisplay(i)})):t.Utils.animate(this,n[1]+" uk-animation-reverse").then(function(){i.toggleClass(e.options.cls).css("animation-duration",""),t.Utils.checkDisplay(i)})})}else this.totoggle.toggleClass(this.options.cls),t.Utils.checkDisplay(this.totoggle);this.updateAria()}},getToggles:function(){this.totoggle=this.options.target?t.$(this.options.target):[],this.updateAria()},updateAria:function(){this.aria&&this.totoggle.length&&this.totoggle.not("[aria-hidden]").each(function(){t.$(this).attr("aria-hidden",t.$(this).hasClass("uk-hidden"))})}})}(UIkit),function(t){"use strict";t.component("alert",{defaults:{fade:!0,duration:200,trigger:".uk-alert-close"},boot:function(){t.$html.on("click.alert.uikit","[data-uk-alert]",function(e){var n=t.$(this);if(!n.data("alert")){var i=t.alert(n,t.Utils.options(n.attr("data-uk-alert")));t.$(e.target).is(i.options.trigger)&&(e.preventDefault(),i.close())}})},init:function(){var t=this;this.on("click",this.options.trigger,function(e){e.preventDefault(),t.close()})},close:function(){var t=this.trigger("close.uk.alert"),e=function(){this.trigger("closed.uk.alert").remove()}.bind(this);this.options.fade?t.css("overflow","hidden").css("max-height",t.height()).animate({height:0,opacity:0,"padding-top":0,"padding-bottom":0,"margin-top":0,"margin-bottom":0},this.options.duration,e):e()}})}(UIkit),function(t){"use strict";t.component("buttonRadio",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttonradio.uikit","[data-uk-button-radio]",function(e){var n=t.$(this);if(!n.data("buttonRadio")){var i=t.buttonRadio(n,t.Utils.options(n.attr("data-uk-button-radio"))),o=t.$(e.target);o.is(i.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(n){var i=t.$(this);i.is('a[href="#"]')&&n.preventDefault(),e.find(e.options.target).not(i).removeClass(e.options.activeClass).blur(),i.addClass(e.options.activeClass),e.find(e.options.target).not(i).attr("aria-checked","false"),i.attr("aria-checked","true"),e.trigger("change.uk.button",[i])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("buttonCheckbox",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttoncheckbox.uikit","[data-uk-button-checkbox]",function(e){var n=t.$(this);if(!n.data("buttonCheckbox")){var i=t.buttonCheckbox(n,t.Utils.options(n.attr("data-uk-button-checkbox"))),o=t.$(e.target);o.is(i.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(n){var i=t.$(this);i.is('a[href="#"]')&&n.preventDefault(),i.toggleClass(e.options.activeClass).blur(),i.attr("aria-checked",i.hasClass(e.options.activeClass)),e.trigger("change.uk.button",[i])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("button",{defaults:{},boot:function(){t.$html.on("click.button.uikit","[data-uk-button]",function(e){var n=t.$(this);if(!n.data("button")){t.button(n,t.Utils.options(n.attr("data-uk-button")));n.trigger("click")}})},init:function(){var t=this;this.element.attr("aria-pressed",this.element.hasClass("uk-active")),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle(),t.trigger("change.uk.button",[t.element.blur().hasClass("uk-active")])})},toggle:function(){this.element.toggleClass("uk-active"),this.element.attr("aria-pressed",this.element.hasClass("uk-active"))}})}(UIkit),function(t){"use strict";function e(e,n,i,o){if(e=t.$(e),n=t.$(n),i=i||window.innerWidth,o=o||e.offset(),n.length){var r=n.outerWidth();if(e.css("min-width",r),"right"==t.langdirection){var s=i-(n.offset().left+r),a=i-(e.offset().left+e.outerWidth());e.css("margin-right",s-a)}else e.css("margin-left",n.offset().left-o.left)}}var n,i=!1,o={x:{"bottom-left":"bottom-right","bottom-right":"bottom-left","bottom-center":"bottom-center","top-left":"top-right","top-right":"top-left","top-center":"top-center","left-top":"right-top","left-bottom":"right-bottom","left-center":"right-center","right-top":"left-top","right-bottom":"left-bottom","right-center":"left-center"},y:{"bottom-left":"top-left","bottom-right":"top-right","bottom-center":"top-center","top-left":"bottom-left","top-right":"bottom-right","top-center":"bottom-center","left-top":"left-bottom","left-bottom":"left-top","left-center":"left-center","right-top":"right-bottom","right-bottom":"right-top","right-center":"right-center"},xy:{"bottom-left":"top-right","bottom-right":"top-left","bottom-center":"top-center","top-left":"bottom-right","top-right":"bottom-left","top-center":"bottom-center","left-top":"right-bottom","left-bottom":"right-top","left-center":"right-center","right-top":"left-bottom","right-bottom":"left-top","right-center":"left-center"}};t.component("dropdown",{defaults:{mode:"hover",pos:"bottom-left",offset:0,remaintime:800,justify:!1,boundary:t.$win,delay:0,dropdownSelector:".uk-dropdown,.uk-dropdown-blank",hoverDelayIdle:250,preventflip:!1},remainIdle:!1,boot:function(){var e=t.support.touch?"click":"mouseenter";t.$html.on(e+".dropdown.uikit focus","[data-uk-dropdown]",function(n){var i=t.$(this);if(!i.data("dropdown")){var o=t.dropdown(i,t.Utils.options(i.attr("data-uk-dropdown")));("click"==e||"mouseenter"==e&&"hover"==o.options.mode)&&o.element.trigger(e),o.element.find(o.options.dropdownSelector).length&&n.preventDefault()}})},init:function(){var e=this;this.dropdown=this.find(this.options.dropdownSelector),this.offsetParent=this.dropdown.parents().filter(function(){return t.$.inArray(t.$(this).css("position"),["relative","fixed","absolute"])!==-1}).slice(0,1),this.centered=this.dropdown.hasClass("uk-dropdown-center"),this.justified=!!this.options.justify&&t.$(this.options.justify),this.boundary=t.$(this.options.boundary),this.boundary.length||(this.boundary=t.$win),this.dropdown.hasClass("uk-dropdown-up")&&(this.options.pos="top-left"),this.dropdown.hasClass("uk-dropdown-flip")&&(this.options.pos=this.options.pos.replace("left","right")),this.dropdown.hasClass("uk-dropdown-center")&&(this.options.pos=this.options.pos.replace(/(left|right)/,"center")),this.element.attr("aria-haspopup","true"),this.element.attr("aria-expanded",this.element.hasClass("uk-open")),this.dropdown.attr("aria-hidden","true"),"click"==this.options.mode||t.support.touch?this.on("click.uk.dropdown",function(n){var i=t.$(n.target);i.parents(e.options.dropdownSelector).length||((i.is("a[href='#']")||i.parent().is("a[href='#']")||e.dropdown.length&&!e.dropdown.is(":visible"))&&n.preventDefault(),i.blur()),e.element.hasClass("uk-open")?(!e.dropdown.find(n.target).length||i.is(".uk-dropdown-close")||i.parents(".uk-dropdown-close").length)&&e.hide():e.show()}):this.on("mouseenter",function(t){e.trigger("pointerenter.uk.dropdown",[e]),e.remainIdle&&clearTimeout(e.remainIdle),n&&clearTimeout(n),i&&i==e||(n=i&&i!=e?setTimeout(function(){n=setTimeout(e.show.bind(e),e.options.delay)},e.options.hoverDelayIdle):setTimeout(e.show.bind(e),e.options.delay))}).on("mouseleave",function(){n&&clearTimeout(n),e.remainIdle=setTimeout(function(){i&&i==e&&e.hide()},e.options.remaintime),e.trigger("pointerleave.uk.dropdown",[e])}).on("click",function(n){var o=t.$(n.target);return e.remainIdle&&clearTimeout(e.remainIdle),i&&i==e?void((!e.dropdown.find(n.target).length||o.is(".uk-dropdown-close")||o.parents(".uk-dropdown-close").length)&&e.hide()):((o.is("a[href='#']")||o.parent().is("a[href='#']"))&&n.preventDefault(),void e.show())})},show:function(){t.$html.off("click.outer.dropdown"),i&&i!=this&&i.hide(!0),n&&clearTimeout(n),this.trigger("beforeshow.uk.dropdown",[this]),this.checkDimensions(),this.element.addClass("uk-open"),this.element.attr("aria-expanded","true"),this.dropdown.attr("aria-hidden","false"),this.trigger("show.uk.dropdown",[this]),t.Utils.checkDisplay(this.dropdown,!0),t.Utils.focus(this.dropdown),i=this,this.registerOuterClick()},hide:function(t){this.trigger("beforehide.uk.dropdown",[this,t]),this.element.removeClass("uk-open"),this.remainIdle&&clearTimeout(this.remainIdle),this.remainIdle=!1,this.element.attr("aria-expanded","false"),this.dropdown.attr("aria-hidden","true"),this.trigger("hide.uk.dropdown",[this,t]),i==this&&(i=!1)},registerOuterClick:function(){var e=this;t.$html.off("click.outer.dropdown"),setTimeout(function(){t.$html.on("click.outer.dropdown",function(o){n&&clearTimeout(n);t.$(o.target);i!=e||e.element.find(o.target).length||(e.hide(!0),t.$html.off("click.outer.dropdown"))})},10)},checkDimensions:function(){if(this.dropdown.length){this.dropdown.removeClass("uk-dropdown-top uk-dropdown-bottom uk-dropdown-left uk-dropdown-right uk-dropdown-stack").css({"top-left":"",left:"","margin-left":"","margin-right":""}),this.justified&&this.justified.length&&this.dropdown.css("min-width","");var n,i=t.$.extend({},this.offsetParent.offset(),{width:this.offsetParent[0].offsetWidth,height:this.offsetParent[0].offsetHeight}),r=this.options.offset,s=this.dropdown,a=(s.show().offset()||{left:0,top:0},s.outerWidth()),l=s.outerHeight(),u=this.boundary.width(),c=(this.boundary[0]!==window&&this.boundary.offset()?this.boundary.offset():{top:0,left:0},this.options.pos),d={"bottom-left":{top:0+i.height+r,left:0},"bottom-right":{top:0+i.height+r,left:0+i.width-a},"bottom-center":{top:0+i.height+r,left:0+i.width/2-a/2},"top-left":{top:0-l-r,left:0},"top-right":{top:0-l-r,left:0+i.width-a},"top-center":{top:0-l-r,left:0+i.width/2-a/2},"left-top":{top:0,left:0-a-r},"left-bottom":{top:0+i.height-l,left:0-a-r},"left-center":{top:0+i.height/2-l/2,left:0-a-r},"right-top":{top:0,left:0+i.width+r},"right-bottom":{top:0+i.height-l,left:0+i.width+r},"right-center":{top:0+i.height/2-l/2,left:0+i.width+r}},h={};if(n=c.split("-"),h=d[c]?d[c]:d["bottom-left"],this.justified&&this.justified.length)e(s.css({left:0}),this.justified,u);else if(this.options.preventflip!==!0){var f;switch(this.checkBoundary(i.left+h.left,i.top+h.top,a,l,u)){case"x":"x"!==this.options.preventflip&&(f=o.x[c]||"right-top");break;case"y":"y"!==this.options.preventflip&&(f=o.y[c]||"top-left");break;case"xy":this.options.preventflip||(f=o.xy[c]||"right-bottom")}f&&(n=f.split("-"),h=d[f]?d[f]:d["bottom-left"],this.checkBoundary(i.left+h.left,i.top+h.top,a,l,u)&&(n=c.split("-"),h=d[c]?d[c]:d["bottom-left"]))}a>u&&(s.addClass("uk-dropdown-stack"),this.trigger("stack.uk.dropdown",[this])),s.css(h).css("display","").addClass("uk-dropdown-"+n[0]);
}},checkBoundary:function(e,n,i,o,r){var s="";return(e<0||e-t.$win.scrollLeft()+i>r)&&(s+="x"),(n-t.$win.scrollTop()<0||n-t.$win.scrollTop()+o>window.innerHeight)&&(s+="y"),s}}),t.component("dropdownOverlay",{defaults:{justify:!1,cls:"",duration:200},boot:function(){t.ready(function(e){t.$("[data-uk-dropdown-overlay]",e).each(function(){var e=t.$(this);e.data("dropdownOverlay")||t.dropdownOverlay(e,t.Utils.options(e.attr("data-uk-dropdown-overlay")))})})},init:function(){var n=this;this.justified=!!this.options.justify&&t.$(this.options.justify),this.overlay=this.element.find("uk-dropdown-overlay"),this.overlay.length||(this.overlay=t.$('<div class="uk-dropdown-overlay"></div>').appendTo(this.element)),this.overlay.addClass(this.options.cls),this.on({"beforeshow.uk.dropdown":function(t,i){n.dropdown=i,n.justified&&n.justified.length&&e(n.overlay.css({display:"block","margin-left":"","margin-right":""}),n.justified,n.justified.outerWidth())},"show.uk.dropdown":function(e,i){var o=n.dropdown.dropdown.outerHeight(!0);n.dropdown.element.removeClass("uk-open"),n.overlay.stop().css("display","block").animate({height:o},n.options.duration,function(){n.dropdown.dropdown.css("visibility",""),n.dropdown.element.addClass("uk-open"),t.Utils.checkDisplay(n.dropdown.dropdown,!0)}),n.pointerleave=!1},"hide.uk.dropdown":function(){n.overlay.stop().animate({height:0},n.options.duration)},"pointerenter.uk.dropdown":function(t,e){clearTimeout(n.remainIdle)},"pointerleave.uk.dropdown":function(t,e){n.pointerleave=!0}}),this.overlay.on({mouseenter:function(){n.remainIdle&&(clearTimeout(n.dropdown.remainIdle),clearTimeout(n.remainIdle))},mouseleave:function(){n.pointerleave&&i&&(n.remainIdle=setTimeout(function(){i&&i.hide()},i.options.remaintime))}})}})}(UIkit),function(t){"use strict";var e=[];t.component("gridMatchHeight",{defaults:{target:!1,row:!0,ignorestacked:!1,observe:!1},boot:function(){t.ready(function(e){t.$("[data-uk-grid-match]",e).each(function(){var e,n=t.$(this);n.data("gridMatchHeight")||(e=t.gridMatchHeight(n,t.Utils.options(n.attr("data-uk-grid-match"))))})})},init:function(){var n=this;this.columns=this.element.children(),this.elements=this.options.target?this.find(this.options.target):this.columns,this.columns.length&&(t.$win.on("load resize orientationchange",function(){var e=function(){n.element.is(":visible")&&n.match()};return t.$(function(){e()}),t.Utils.debounce(e,50)}()),this.options.observe&&t.domObserve(this.element,function(t){n.element.is(":visible")&&n.match()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.match()}.bind(this)),e.push(this))},match:function(){var e=this.columns.filter(":visible:first");if(e.length){var n=Math.ceil(100*parseFloat(e.css("width"))/parseFloat(e.parent().css("width")))>=100;return n&&!this.options.ignorestacked?this.revert():t.Utils.matchHeights(this.elements,this.options),this}},revert:function(){return this.elements.css("min-height",""),this}}),t.component("gridMargin",{defaults:{cls:"uk-grid-margin",rowfirst:"uk-row-first"},boot:function(){t.ready(function(e){t.$("[data-uk-grid-margin]",e).each(function(){var e,n=t.$(this);n.data("gridMargin")||(e=t.gridMargin(n,t.Utils.options(n.attr("data-uk-grid-margin"))))})})},init:function(){t.stackMargin(this.element,this.options)}})}(UIkit),function(t){"use strict";function e(e,n){if(n)return"object"==typeof e?(e=e instanceof jQuery?e:t.$(e),e.parent().length&&(n.persist=e,n.persist.data("modalPersistParent",e.parent()))):e="string"==typeof e||"number"==typeof e?t.$("<div></div>").html(e):t.$("<div></div>").html("UIkit.modal Error: Unsupported data type: "+typeof e),e.appendTo(n.element.find(".uk-modal-dialog")),n}var n,i=!1,o=0,r=t.$html;t.$win.on("resize orientationchange",t.Utils.debounce(function(){t.$(".uk-modal.uk-open").each(function(){return t.$(this).data("modal")&&t.$(this).data("modal").resize()})},150)),t.component("modal",{defaults:{keyboard:!0,bgclose:!0,minScrollHeight:150,center:!1,modal:!0},scrollable:!1,transition:!1,hasTransitioned:!0,init:function(){if(n||(n=t.$("body")),this.element.length){var e=this;this.paddingdir="padding-"+("left"==t.langdirection?"right":"left"),this.dialog=this.find(".uk-modal-dialog"),this.active=!1,this.element.attr("aria-hidden",this.element.hasClass("uk-open")),this.on("click",".uk-modal-close",function(t){t.preventDefault(),e.hide()}).on("click",function(n){var i=t.$(n.target);i[0]==e.element[0]&&e.options.bgclose&&e.hide()}),t.domObserve(this.element,function(t){e.resize()})}},toggle:function(){return this[this.isActive()?"hide":"show"]()},show:function(){if(this.element.length){var e=this;if(!this.isActive())return this.options.modal&&i&&i.hide(!0),this.element.removeClass("uk-open").show(),this.resize(!0),this.options.modal&&(i=this),this.active=!0,o++,t.support.transition?(this.hasTransitioned=!1,this.element.one(t.support.transition.end,function(){e.hasTransitioned=!0,t.Utils.focus(e.dialog,"a[href]")}).addClass("uk-open")):(this.element.addClass("uk-open"),t.Utils.focus(this.dialog,"a[href]")),r.addClass("uk-modal-page").height(),this.element.attr("aria-hidden","false"),this.element.trigger("show.uk.modal"),t.Utils.checkDisplay(this.dialog,!0),this}},hide:function(e){if(!e&&t.support.transition&&this.hasTransitioned){var n=this;this.one(t.support.transition.end,function(){n._hide()}).removeClass("uk-open")}else this._hide();return this},resize:function(t){if(this.isActive()||t){var e=n.width();if(this.scrollbarwidth=window.innerWidth-e,n.css(this.paddingdir,this.scrollbarwidth),this.element.css("overflow-y",this.scrollbarwidth?"scroll":"auto"),!this.updateScrollable()&&this.options.center){var i=this.dialog.outerHeight(),o=parseInt(this.dialog.css("margin-top"),10)+parseInt(this.dialog.css("margin-bottom"),10);i+o<window.innerHeight?this.dialog.css({top:window.innerHeight/2-i/2-o}):this.dialog.css({top:""})}}},updateScrollable:function(){var t=this.dialog.find(".uk-overflow-container:visible:first");if(t.length){t.css("height",0);var e=Math.abs(parseInt(this.dialog.css("margin-top"),10)),n=this.dialog.outerHeight(),i=window.innerHeight,o=i-2*(e<20?20:e)-n;return t.css({"max-height":o<this.options.minScrollHeight?"":o,height:""}),!0}return!1},_hide:function(){this.active=!1,o>0?o--:o=0,this.element.hide().removeClass("uk-open"),this.element.attr("aria-hidden","true"),o||(r.removeClass("uk-modal-page"),n.css(this.paddingdir,"")),i===this&&(i=!1),this.trigger("hide.uk.modal")},isActive:function(){return this.element.hasClass("uk-open")}}),t.component("modalTrigger",{boot:function(){t.$html.on("click.modal.uikit","[data-uk-modal]",function(e){var n=t.$(this);if(n.is("a")&&e.preventDefault(),!n.data("modalTrigger")){var i=t.modalTrigger(n,t.Utils.options(n.attr("data-uk-modal")));i.show()}}),t.$html.on("keydown.modal.uikit",function(t){i&&27===t.keyCode&&i.options.keyboard&&(t.preventDefault(),i.hide())})},init:function(){var e=this;this.options=t.$.extend({target:!!e.element.is("a")&&e.element.attr("href")},this.options),this.modal=t.modal(this.options.target,this.options),this.on("click",function(t){t.preventDefault(),e.show()}),this.proxy(this.modal,"show hide isActive")}}),t.modal.dialog=function(n,i){var o=t.modal(t.$(t.modal.dialog.template).appendTo("body"),i);return o.on("hide.uk.modal",function(){o.persist&&(o.persist.appendTo(o.persist.data("modalPersistParent")),o.persist=!1),o.element.remove()}),e(n,o),o},t.modal.dialog.template='<div class="uk-modal"><div class="uk-modal-dialog" style="min-height:0;"></div></div>',t.modal.alert=function(e,n){n=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},n);var i=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary uk-modal-close">'+n.labels.Ok+"</button></div>"].join(""),n);return i.on("show.uk.modal",function(){setTimeout(function(){i.element.find("button:first").focus()},50)}),i.show()},t.modal.confirm=function(e,n,i){var o=arguments.length>1&&arguments[arguments.length-1]?arguments[arguments.length-1]:{};n=t.$.isFunction(n)?n:function(){},i=t.$.isFunction(i)?i:function(){},o=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},t.$.isFunction(o)?{}:o);var r=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button js-modal-confirm-cancel">'+o.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-confirm">'+o.labels.Ok+"</button></div>"].join(""),o);return r.element.find(".js-modal-confirm, .js-modal-confirm-cancel").on("click",function(){t.$(this).is(".js-modal-confirm")?n():i(),r.hide()}),r.on("show.uk.modal",function(){setTimeout(function(){r.element.find(".js-modal-confirm").focus()},50)}),r.show()},t.modal.prompt=function(e,n,i,o){i=t.$.isFunction(i)?i:function(t){},o=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},o);var r=t.modal.dialog([e?'<div class="uk-modal-content uk-form">'+String(e)+"</div>":"",'<div class="uk-margin-small-top uk-modal-content uk-form"><p><input type="text" class="uk-width-1-1"></p></div>','<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-modal-close">'+o.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-ok">'+o.labels.Ok+"</button></div>"].join(""),o),s=r.element.find("input[type='text']").val(n||"").on("keyup",function(t){13==t.keyCode&&r.element.find(".js-modal-ok").trigger("click")});return r.element.find(".js-modal-ok").on("click",function(){i(s.val())!==!1&&r.hide()}),r.show()},t.modal.blockUI=function(e,n){var i=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e||'<div class="uk-text-center">...</div>')+"</div>"].join(""),t.$.extend({bgclose:!1,keyboard:!1,modal:!1},n));return i.content=i.element.find(".uk-modal-content:first"),i.show()},t.modal.labels={Ok:"Ok",Cancel:"Cancel"}}(UIkit),function(t){"use strict";function e(e){var n=t.$(e),i="auto";if(n.is(":visible"))i=n.outerHeight();else{var o={position:n.css("position"),visibility:n.css("visibility"),display:n.css("display")};i=n.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),n.css(o)}return i}t.component("nav",{defaults:{toggle:">li.uk-parent > a[href='#']",lists:">li.uk-parent > ul",multiple:!1},boot:function(){t.ready(function(e){t.$("[data-uk-nav]",e).each(function(){var e=t.$(this);if(!e.data("nav")){t.nav(e,t.Utils.options(e.attr("data-uk-nav")))}})})},init:function(){var e=this;this.on("click.uk.nav",this.options.toggle,function(n){n.preventDefault();var i=t.$(this);e.open(i.parent()[0]==e.element[0]?i:i.parent("li"))}),this.update(!0),t.domObserve(this.element,function(t){e.element.find(this.options.lists).not("[role]").length&&e.update()})},update:function(e){var n=this;this.find(this.options.lists).each(function(){var e=t.$(this).attr("role","menu"),i=e.closest("li"),o=i.hasClass("uk-active");i.data("list-container")||(e.wrap('<div style="overflow:hidden;height:0;position:relative;"></div>'),i.data("list-container",e.parent()[o?"removeClass":"addClass"]("uk-hidden"))),i.attr("aria-expanded",i.hasClass("uk-open")),o&&n.open(i,!0)})},open:function(n,i){var o=this,r=this.element,s=t.$(n),a=s.data("list-container");this.options.multiple||r.children(".uk-open").not(n).each(function(){var e=t.$(this);e.data("list-container")&&e.data("list-container").stop().animate({height:0},function(){t.$(this).parent().removeClass("uk-open").end().addClass("uk-hidden")})}),s.toggleClass("uk-open"),s.attr("aria-expanded",s.hasClass("uk-open")),a&&(s.hasClass("uk-open")&&a.removeClass("uk-hidden"),i?(a.stop().height(s.hasClass("uk-open")?"auto":0),s.hasClass("uk-open")||a.addClass("uk-hidden"),this.trigger("display.uk.check")):a.stop().animate({height:s.hasClass("uk-open")?e(a.find("ul:first")):0},function(){s.hasClass("uk-open")?a.css("height",""):a.addClass("uk-hidden"),o.trigger("display.uk.check")}))}})}(UIkit),function(t){"use strict";var e={x:window.scrollX,y:window.scrollY},n=(t.$win,t.$doc,t.$html),i={show:function(i,o){if(i=t.$(i),i.length){o=t.$.extend({mode:"push"},o);var r=t.$("body"),s=i.find(".uk-offcanvas-bar:first"),a="right"==t.langdirection,l=s.hasClass("uk-offcanvas-bar-flip")?-1:1,u=l*(a?-1:1),c=window.innerWidth-r.width();e={x:window.pageXOffset,y:window.pageYOffset},s.attr("mode",o.mode),i.addClass("uk-active"),r.css({width:window.innerWidth-c,height:window.innerHeight}).addClass("uk-offcanvas-page"),"push"!=o.mode&&"reveal"!=o.mode||r.css(a?"margin-right":"margin-left",(a?-1:1)*(s.outerWidth()*u)),"reveal"==o.mode&&s.css("clip","rect(0, "+s.outerWidth()+"px, 100vh, 0)"),n.css("margin-top",e.y*-1).width(),s.addClass("uk-offcanvas-bar-show"),this._initElement(i),s.trigger("show.uk.offcanvas",[i,s]),i.attr("aria-hidden","false")}},hide:function(i){var o=t.$("body"),r=t.$(".uk-offcanvas.uk-active"),s="right"==t.langdirection,a=r.find(".uk-offcanvas-bar:first"),l=function(){o.removeClass("uk-offcanvas-page").css({width:"",height:"","margin-left":"","margin-right":""}),r.removeClass("uk-active"),a.removeClass("uk-offcanvas-bar-show"),n.css("margin-top",""),window.scrollTo(e.x,e.y),a.trigger("hide.uk.offcanvas",[r,a]),r.attr("aria-hidden","true")};r.length&&("none"==a.attr("mode")&&(i=!0),t.support.transition&&!i?(o.one(t.support.transition.end,function(){l()}).css(s?"margin-right":"margin-left",""),"reveal"==a.attr("mode")&&a.css("clip",""),setTimeout(function(){a.removeClass("uk-offcanvas-bar-show")},0)):l())},_initElement:function(e){e.data("OffcanvasInit")||(e.on("click.uk.offcanvas swipeRight.uk.offcanvas swipeLeft.uk.offcanvas",function(e){var n=t.$(e.target);if(!e.type.match(/swipe/)&&!n.hasClass("uk-offcanvas-close")){if(n.hasClass("uk-offcanvas-bar"))return;if(n.parents(".uk-offcanvas-bar:first").length)return}e.stopImmediatePropagation(),i.hide()}),e.on("click","a[href*='#']",function(e){var n=t.$(this),o=n.attr("href");"#"!=o&&(t.$doc.one("hide.uk.offcanvas",function(){var e;try{e=t.$(n[0].hash)}catch(i){e=""}e.length||(e=t.$('[name="'+n[0].hash.replace("#","")+'"]')),e.length&&t.Utils.scrollToElement?t.Utils.scrollToElement(e,t.Utils.options(n.attr("data-uk-smooth-scroll")||"{}")):window.location.href=o}),i.hide())}),e.data("OffcanvasInit",!0))}};t.component("offcanvasTrigger",{boot:function(){n.on("click.offcanvas.uikit","[data-uk-offcanvas]",function(e){e.preventDefault();var n=t.$(this);if(!n.data("offcanvasTrigger")){t.offcanvasTrigger(n,t.Utils.options(n.attr("data-uk-offcanvas")));n.trigger("click")}}),n.on("keydown.uk.offcanvas",function(t){27===t.keyCode&&i.hide()})},init:function(){var e=this;this.options=t.$.extend({target:!!e.element.is("a")&&e.element.attr("href"),mode:"push"},this.options),this.on("click",function(t){t.preventDefault(),i.show(e.options.target,e.options)})}}),t.offcanvas=i}(UIkit),function(t){"use strict";function e(e,n,i){var o,r=t.$.Deferred(),s=e,a=e;return i[0]===n[0]?(r.resolve(),r.promise()):("object"==typeof e&&(s=e[0],a=e[1]||e[0]),t.$body.css("overflow-x","hidden"),o=function(){n&&n.hide().removeClass("uk-active "+a+" uk-animation-reverse"),i.addClass(s).one(t.support.animation.end,function(){setTimeout(function(){i.removeClass(""+s).css({opacity:"",display:""})},0),r.resolve(),t.$body.css("overflow-x",""),n&&n.css({opacity:"",display:""})}.bind(this)).show()},i.css("animation-duration",this.options.duration+"ms"),n&&n.length?(n.css("animation-duration",this.options.duration+"ms"),n.css("display","none").addClass(a+" uk-animation-reverse").one(t.support.animation.end,function(){o()}.bind(this)).css("display","")):(i.addClass("uk-active"),o()),r.promise())}var n;t.component("switcher",{defaults:{connect:!1,toggle:">*",active:0,animation:!1,duration:200,swiping:!0},animating:!1,boot:function(){t.ready(function(e){t.$("[data-uk-switcher]",e).each(function(){var e=t.$(this);if(!e.data("switcher")){t.switcher(e,t.Utils.options(e.attr("data-uk-switcher")))}})})},init:function(){var e=this;this.on("click.uk.switcher",this.options.toggle,function(t){t.preventDefault(),e.show(this)}),this.options.connect&&(this.connect=t.$(this.options.connect),this.connect.length&&(this.connect.on("click.uk.switcher","[data-uk-switcher-item]",function(n){n.preventDefault();var i=t.$(this).attr("data-uk-switcher-item");if(e.index!=i)switch(i){case"next":case"previous":e.show(e.index+("next"==i?1:-1));break;default:e.show(parseInt(i,10))}}),this.options.swiping&&this.connect.on("swipeRight swipeLeft",function(t){t.preventDefault(),window.getSelection().toString()||e.show(e.index+("swipeLeft"==t.type?1:-1))}),this.update()))},update:function(){this.connect.children().removeClass("uk-active").attr("aria-hidden","true");var t=this.find(this.options.toggle),e=t.filter(".uk-active");if(e.length)this.show(e,!1);else{if(this.options.active===!1)return;e=t.eq(this.options.active),this.show(e.length?e:t.eq(0),!1)}t.not(e).attr("aria-expanded","false"),e.attr("aria-expanded","true")},show:function(i,o){if(!this.animating){if(isNaN(i))i=t.$(i);else{var r=this.find(this.options.toggle);i=i<0?r.length-1:i,i=r.eq(r[i]?i:0)}var s=this,r=this.find(this.options.toggle),a=t.$(i),l=n[this.options.animation]||function(t,i){if(!s.options.animation)return n.none.apply(s);var o=s.options.animation.split(",");return 1==o.length&&(o[1]=o[0]),o[0]=o[0].trim(),o[1]=o[1].trim(),e.apply(s,[o,t,i])};o!==!1&&t.support.animation||(l=n.none),a.hasClass("uk-disabled")||(r.attr("aria-expanded","false"),a.attr("aria-expanded","true"),r.filter(".uk-active").removeClass("uk-active"),a.addClass("uk-active"),this.options.connect&&this.connect.length&&(this.index=this.find(this.options.toggle).index(a),this.index==-1&&(this.index=0),this.connect.each(function(){var e=t.$(this),n=t.$(e.children()),i=t.$(n.filter(".uk-active")),o=t.$(n.eq(s.index));s.animating=!0,l.apply(s,[i,o]).then(function(){i.removeClass("uk-active"),o.addClass("uk-active"),i.attr("aria-hidden","true"),o.attr("aria-hidden","false"),t.Utils.checkDisplay(o,!0),s.animating=!1})})),this.trigger("show.uk.switcher",[a]))}}}),n={none:function(){var e=t.$.Deferred();return e.resolve(),e.promise()},fade:function(t,n){return e.apply(this,["uk-animation-fade",t,n])},"slide-bottom":function(t,n){return e.apply(this,["uk-animation-slide-bottom",t,n])},"slide-top":function(t,n){return e.apply(this,["uk-animation-slide-top",t,n])},"slide-vertical":function(t,n,i){var o=["uk-animation-slide-top","uk-animation-slide-bottom"];return t&&t.index()>n.index()&&o.reverse(),e.apply(this,[o,t,n])},"slide-left":function(t,n){return e.apply(this,["uk-animation-slide-left",t,n])},"slide-right":function(t,n){return e.apply(this,["uk-animation-slide-right",t,n])},"slide-horizontal":function(t,n,i){var o=["uk-animation-slide-right","uk-animation-slide-left"];return t&&t.index()>n.index()&&o.reverse(),e.apply(this,[o,t,n])},scale:function(t,n){return e.apply(this,["uk-animation-scale-up",t,n])}},t.switcher.animations=n}(UIkit),function(t){"use strict";t.component("tab",{defaults:{target:">li:not(.uk-tab-responsive, .uk-disabled)",connect:!1,active:0,animation:!1,duration:200,swiping:!0},boot:function(){t.ready(function(e){t.$("[data-uk-tab]",e).each(function(){var e=t.$(this);if(!e.data("tab")){t.tab(e,t.Utils.options(e.attr("data-uk-tab")))}})})},init:function(){var e=this;this.current=!1,this.on("click.uk.tab",this.options.target,function(n){if(n.preventDefault(),!e.switcher||!e.switcher.animating){var i=e.find(e.options.target).not(this);i.removeClass("uk-active").blur(),e.trigger("change.uk.tab",[t.$(this).addClass("uk-active"),e.current]),e.current=t.$(this),e.options.connect||(i.attr("aria-expanded","false"),t.$(this).attr("aria-expanded","true"))}}),this.options.connect&&(this.connect=t.$(this.options.connect)),this.responsivetab=t.$('<li class="uk-tab-responsive uk-active"><a></a></li>').append('<div class="uk-dropdown uk-dropdown-small"><ul class="uk-nav uk-nav-dropdown"></ul><div>'),this.responsivetab.dropdown=this.responsivetab.find(".uk-dropdown"),this.responsivetab.lst=this.responsivetab.dropdown.find("ul"),this.responsivetab.caption=this.responsivetab.find("a:first"),this.element.hasClass("uk-tab-bottom")&&this.responsivetab.dropdown.addClass("uk-dropdown-up"),this.responsivetab.lst.on("click.uk.tab","a",function(n){n.preventDefault(),n.stopPropagation();var i=t.$(this);e.element.children("li:not(.uk-tab-responsive)").eq(i.data("index")).trigger("click")}),this.on("show.uk.switcher change.uk.tab",function(t,n){e.responsivetab.caption.html(n.text())}),this.element.append(this.responsivetab),this.options.connect&&(this.switcher=t.switcher(this.element,{toggle:">li:not(.uk-tab-responsive)",connect:this.options.connect,active:this.options.active,animation:this.options.animation,duration:this.options.duration,swiping:this.options.swiping})),t.dropdown(this.responsivetab,{mode:"click",preventflip:"y"}),e.trigger("change.uk.tab",[this.element.find(this.options.target).not(".uk-tab-responsive").filter(".uk-active")]),this.check(),t.$win.on("resize orientationchange",t.Utils.debounce(function(){e.element.is(":visible")&&e.check()},100)),this.on("display.uk.check",function(){e.element.is(":visible")&&e.check()})},check:function(){var e=this.element.children("li:not(.uk-tab-responsive)").removeClass("uk-hidden");if(!e.length)return void this.responsivetab.addClass("uk-hidden");var n,i,o,r=e.eq(0).offset().top+Math.ceil(e.eq(0).height()/2),s=!1;if(this.responsivetab.lst.empty(),e.each(function(){t.$(this).offset().top>r&&(s=!0)}),s)for(var a=0;a<e.length;a++)n=t.$(e.eq(a)),i=n.find("a"),"none"==n.css("float")||n.attr("uk-dropdown")||(n.hasClass("uk-disabled")||(o=n[0].outerHTML.replace("<a ",'<a data-index="'+a+'" '),this.responsivetab.lst.append(o)),n.addClass("uk-hidden"));this.responsivetab[this.responsivetab.lst.children("li").length?"removeClass":"addClass"]("uk-hidden")}})}(UIkit),function(t){"use strict";t.component("cover",{defaults:{automute:!0},boot:function(){t.ready(function(e){t.$("[data-uk-cover]",e).each(function(){var e=t.$(this);if(!e.data("cover")){t.cover(e,t.Utils.options(e.attr("data-uk-cover")))}})})},init:function(){if(this.parent=this.element.parent(),t.$win.on("load resize orientationchange",t.Utils.debounce(function(){this.check()}.bind(this),100)),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.check()}.bind(this)),this.check(),this.element.is("iframe")&&this.options.automute){var e=this.element.attr("src");this.element.attr("src","").on("load",function(){this.contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}).attr("src",[e,e.indexOf("?")>-1?"&":"?","enablejsapi=1&api=1"].join(""))}},check:function(){this.element.css({width:"",height:""}),this.dimension={w:this.element.width(),h:this.element.height()},this.element.attr("width")&&!isNaN(this.element.attr("width"))&&(this.dimension.w=this.element.attr("width")),this.element.attr("height")&&!isNaN(this.element.attr("height"))&&(this.dimension.h=this.element.attr("height")),this.ratio=this.dimension.w/this.dimension.h;var t,e,n=this.parent.width(),i=this.parent.height();n/this.ratio<i?(t=Math.ceil(i*this.ratio),e=i):(t=n,e=Math.ceil(n/this.ratio)),this.element.css({width:t,height:e})}})}(UIkit),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-slideshow",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";var e,n=0;t.component("slideshow",{defaults:{animation:"fade",duration:500,height:"auto",start:0,autoplay:!1,autoplayInterval:7e3,videoautoplay:!0,videomute:!0,slices:15,pauseOnHover:!0,kenburns:!1,kenburnsanimations:["uk-animation-middle-left","uk-animation-top-right","uk-animation-bottom-left","uk-animation-top-center","","uk-animation-bottom-right"]},current:!1,interval:null,hovering:!1,boot:function(){t.ready(function(e){t.$("[data-uk-slideshow]",e).each(function(){var e=t.$(this);e.data("slideshow")||t.slideshow(e,t.Utils.options(e.attr("data-uk-slideshow")))})})},init:function(){var e=this;this.container=this.element.hasClass("uk-slideshow")?this.element:t.$(this.find(".uk-slideshow:first")),this.current=this.options.start,this.animating=!1,this.fixFullscreen=navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&this.container.hasClass("uk-slideshow-fullscreen"),this.options.kenburns&&(this.kbanimduration=this.options.kenburns===!0?"15s":this.options.kenburns,String(this.kbanimduration).match(/(ms|s)$/)||(this.kbanimduration+="ms"),"string"==typeof this.options.kenburnsanimations&&(this.options.kenburnsanimations=this.options.kenburnsanimations.split(","))),this.update(),this.on("click.uk.slideshow","[data-uk-slideshow-item]",function(n){n.preventDefault();var i=t.$(this).attr("data-uk-slideshow-item");if(e.current!=i){switch(i){case"next":case"previous":e["next"==i?"next":"previous"]();break;default:e.show(parseInt(i,10))}e.stop()}}),t.$win.on("resize load",t.Utils.debounce(function(){e.resize(),e.fixFullscreen&&(e.container.css("height",window.innerHeight),e.slides.css("height",window.innerHeight))},100)),setTimeout(function(){e.resize()},80),this.options.autoplay&&this.start(),this.options.videoautoplay&&this.slides.eq(this.current).data("media")&&this.playmedia(this.slides.eq(this.current).data("media")),this.options.kenburns&&this.applyKenBurns(this.slides.eq(this.current)),this.container.on({mouseenter:function(){e.options.pauseOnHover&&(e.hovering=!0)},mouseleave:function(){e.hovering=!1}}),this.on("swipeRight swipeLeft",function(t){e["swipeLeft"==t.type?"next":"previous"]()}),this.on("display.uk.check",function(){e.element.is(":visible")&&(e.resize(),e.fixFullscreen&&(e.container.css("height",window.innerHeight),e.slides.css("height",window.innerHeight)))}),t.domObserve(this.element,function(t){e.container.children(":not([data-slide])").length&&e.update(!0)})},update:function(e){var i,o=this,r=0;this.slides=this.container.children(),this.slidesCount=this.slides.length,this.slides.eq(this.current).length||(this.current=0),this.slides.each(function(e){var s=t.$(this);if(!s.data("processed")){var a=s.children("img,video,iframe").eq(0),l="html";if(s.data("media",a),s.data("sizer",a),a.length){var u;switch(l=a[0].nodeName.toLowerCase(),a[0].nodeName){case"IMG":var c=t.$('<div class="uk-cover-background uk-position-cover"></div>').css({"background-image":"url("+a.attr("src")+")"});a.attr("width")&&a.attr("height")&&(u=t.$("<canvas></canvas>").attr({width:a.attr("width"),height:a.attr("height")}),a.replaceWith(u),a=u,u=void 0),a.css({width:"100%",height:"auto",opacity:0}),s.prepend(c).data("cover",c);break;case"IFRAME":var d=a[0].src,h="sw-"+ ++n;a.attr("src","").on("load",function(){if((e!==o.current||e==o.current&&!o.options.videoautoplay)&&o.pausemedia(a),o.options.videomute){o.mutemedia(a);var t=setInterval(function(e){return function(){o.mutemedia(a),++e>=4&&clearInterval(t)}}(0),250)}}).data("slideshow",o).attr("data-player-id",h).attr("src",[d,d.indexOf("?")>-1?"&":"?","enablejsapi=1&api=1&player_id="+h].join("")).addClass("uk-position-absolute"),t.support.touch||a.css("pointer-events","none"),u=!0,t.cover&&(t.cover(a),a.attr("data-uk-cover","{}"));break;case"VIDEO":a.addClass("uk-cover-object uk-position-absolute"),u=!0,o.options.videomute&&o.mutemedia(a)}if(u){i=t.$("<canvas></canvas>").attr({width:a[0].width,height:a[0].height});var f=t.$('<img style="width:100%;height:auto;">').attr("src",i[0].toDataURL());s.prepend(f),s.data("sizer",f)}}else s.data("sizer",s);o.hasKenBurns(s)&&s.data("cover").css({"-webkit-animation-duration":o.kbanimduration,"animation-duration":o.kbanimduration}),s.data("processed",++r),s.attr("data-slide",l)}}),r&&(this.triggers=this.find("[data-uk-slideshow-item]"),this.slides.attr("aria-hidden","true").removeClass("uk-active").eq(this.current).addClass("uk-active").attr("aria-hidden","false"),this.triggers.filter('[data-uk-slideshow-item="'+this.current+'"]').addClass("uk-active")),e&&r&&this.resize()},resize:function(){if(!this.container.hasClass("uk-slideshow-fullscreen")){var e=this.options.height;"auto"===this.options.height&&(e=0,this.slides.css("height","").each(function(){e=Math.max(e,t.$(this).height())})),this.container.css("height",e),this.slides.css("height",e)}},show:function(n,i){if(!this.animating&&this.current!=n){this.animating=!0;var o=this,r=this.slides.eq(this.current),s=this.slides.eq(n),a=i?i:this.current<n?1:-1,l=r.data("media"),u=e[this.options.animation]?this.options.animation:"fade",c=s.data("media"),d=function(){o.animating&&(l&&l.is("video,iframe")&&o.pausemedia(l),c&&c.is("video,iframe")&&o.playmedia(c),s.addClass("uk-active").attr("aria-hidden","false"),r.removeClass("uk-active").attr("aria-hidden","true"),o.animating=!1,o.current=n,t.Utils.checkDisplay(s,'[class*="uk-animation-"]:not(.uk-cover-background.uk-position-cover)'),o.trigger("show.uk.slideshow",[s,r,o]))};o.applyKenBurns(s),t.support.animation||(u="none"),r=t.$(r),s=t.$(s),o.trigger("beforeshow.uk.slideshow",[s,r,o]),e[u].apply(this,[r,s,a]).then(d),o.triggers.removeClass("uk-active"),o.triggers.filter('[data-uk-slideshow-item="'+n+'"]').addClass("uk-active")}},applyKenBurns:function(t){if(this.hasKenBurns(t)){var e=this.options.kenburnsanimations,n=this.kbindex||0;t.data("cover").attr("class","uk-cover-background uk-position-cover").width(),t.data("cover").addClass(["uk-animation-scale","uk-animation-reverse",e[n].trim()].join(" ")),this.kbindex=e[n+1]?n+1:0}},hasKenBurns:function(t){return this.options.kenburns&&t.data("cover")},next:function(){this.show(this.slides[this.current+1]?this.current+1:0,1)},previous:function(){this.show(this.slides[this.current-1]?this.current-1:this.slides.length-1,-1)},start:function(){this.stop();var t=this;this.interval=setInterval(function(){t.hovering||t.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)},playmedia:function(t){if(t&&t[0])switch(t[0].nodeName){case"VIDEO":this.options.videomute||(t[0].muted=!1),t[0].play();break;case"IFRAME":this.options.videomute||t[0].contentWindow.postMessage('{ "event": "command", "func": "unmute", "method":"setVolume", "value":1}',"*"),t[0].contentWindow.postMessage('{ "event": "command", "func": "playVideo", "method":"play"}',"*")}},pausemedia:function(t){switch(t[0].nodeName){case"VIDEO":t[0].pause();break;case"IFRAME":t[0].contentWindow.postMessage('{ "event": "command", "func": "pauseVideo", "method":"pause"}',"*")}},mutemedia:function(t){switch(t[0].nodeName){case"VIDEO":t[0].muted=!0;break;case"IFRAME":t[0].contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}}}),e={none:function(){var e=t.$.Deferred();return e.resolve(),e.promise()},scroll:function(e,n,i){var o=t.$.Deferred();return e.css("animation-duration",this.options.duration+"ms"),n.css("animation-duration",this.options.duration+"ms"),n.css("opacity",1).one(t.support.animation.end,function(){e.css("opacity",0).removeClass(i==-1?"uk-slideshow-scroll-backward-out":"uk-slideshow-scroll-forward-out"),n.removeClass(i==-1?"uk-slideshow-scroll-backward-in":"uk-slideshow-scroll-forward-in"),o.resolve()}.bind(this)),e.addClass(i==-1?"uk-slideshow-scroll-backward-out":"uk-slideshow-scroll-forward-out"),n.addClass(i==-1?"uk-slideshow-scroll-backward-in":"uk-slideshow-scroll-forward-in"),n.width(),o.promise()},swipe:function(e,n,i){var o=t.$.Deferred();return e.css("animation-duration",this.options.duration+"ms"),n.css("animation-duration",this.options.duration+"ms"),n.css("opacity",1).one(t.support.animation.end,function(){e.css("opacity",0).removeClass(i===-1?"uk-slideshow-swipe-backward-out":"uk-slideshow-swipe-forward-out"),n.removeClass(i===-1?"uk-slideshow-swipe-backward-in":"uk-slideshow-swipe-forward-in"),o.resolve()}.bind(this)),e.addClass(i==-1?"uk-slideshow-swipe-backward-out":"uk-slideshow-swipe-forward-out"),n.addClass(i==-1?"uk-slideshow-swipe-backward-in":"uk-slideshow-swipe-forward-in"),n.width(),o.promise();
},scale:function(e,n,i){var o=t.$.Deferred();return e.css("animation-duration",this.options.duration+"ms"),n.css("animation-duration",this.options.duration+"ms"),n.css("opacity",1),e.one(t.support.animation.end,function(){e.css("opacity",0).removeClass("uk-slideshow-scale-out"),o.resolve()}.bind(this)),e.addClass("uk-slideshow-scale-out"),e.width(),o.promise()},fade:function(e,n,i){var o=t.$.Deferred();return e.css("animation-duration",this.options.duration+"ms"),n.css("animation-duration",this.options.duration+"ms"),n.css("opacity",1),n.data("cover")||n.data("placeholder")||n.css("opacity",1).one(t.support.animation.end,function(){n.removeClass("uk-slideshow-fade-in")}).addClass("uk-slideshow-fade-in"),e.one(t.support.animation.end,function(){e.css("opacity",0).removeClass("uk-slideshow-fade-out"),o.resolve()}.bind(this)),e.addClass("uk-slideshow-fade-out"),e.width(),o.promise()}},t.slideshow.animations=e,window.addEventListener("message",function(e){var n,i=e.data;if("string"==typeof i)try{i=JSON.parse(i)}catch(o){i={}}e.origin&&e.origin.indexOf("vimeo")>-1&&"ready"==i.event&&i.player_id&&(n=t.$('[data-player-id="'+i.player_id+'"]'),n.length&&n.data("slideshow").mutemedia(n))},!1)}),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-lightbox",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";function e(e){if(n)return n.lightbox=e,n;n=t.$(['<div class="uk-modal">','<div class="uk-modal-dialog uk-modal-dialog-lightbox uk-slidenav-position" style="margin-left:auto;margin-right:auto;width:200px;height:200px;top:'+Math.abs(window.innerHeight/2-200)+'px;">','<a href="#" class="uk-modal-close uk-close uk-close-alt"></a>','<div class="uk-lightbox-content"></div>','<div class="uk-modal-spinner uk-hidden"></div>',"</div>","</div>"].join("")).appendTo("body"),n.dialog=n.find(".uk-modal-dialog:first"),n.content=n.find(".uk-lightbox-content:first"),n.loader=n.find(".uk-modal-spinner:first"),n.closer=n.find(".uk-close.uk-close-alt"),n.modal=t.modal(n,{modal:!1}),n.on("swipeRight swipeLeft",function(t){n.lightbox["swipeLeft"==t.type?"next":"previous"]()}).on("click","[data-lightbox-previous], [data-lightbox-next]",function(e){e.preventDefault(),n.lightbox[t.$(this).is("[data-lightbox-next]")?"next":"previous"]()}),n.on("hide.uk.modal",function(t){n.content.html("")});var i={w:window.innerWidth,h:window.innerHeight};return t.$win.on("load resize orientationchange",t.Utils.debounce(function(e){i.w!==window.innerWidth&&n.is(":visible")&&!t.Utils.isFullscreen()&&n.lightbox.fitSize(),i={w:window.innerWidth,h:window.innerHeight}},100)),n.lightbox=e,n}var n,i={};return t.component("lightbox",{defaults:{allowfullscreen:!0,duration:400,group:!1,keyboard:!0},index:0,items:!1,boot:function(){t.$html.on("click","[data-uk-lightbox]",function(e){e.preventDefault();var n=t.$(this);n.data("lightbox")||t.lightbox(n,t.Utils.options(n.attr("data-uk-lightbox"))),n.data("lightbox").show(n)}),t.$doc.on("keyup",function(t){if(n&&n.is(":visible")&&n.lightbox.options.keyboard)switch(t.preventDefault(),t.keyCode){case 37:n.lightbox.previous();break;case 39:n.lightbox.next()}})},init:function(){var e=[];if(this.index=0,this.siblings=[],this.element&&this.element.length){var n=this.options.group?t.$(['[data-uk-lightbox*="'+this.options.group+'"]',"[data-uk-lightbox*='"+this.options.group+"']"].join(",")):this.element;n.each(function(){var n=t.$(this);e.push({source:n.attr("href"),title:n.attr("data-title")||n.attr("title"),type:n.attr("data-lightbox-type")||"auto",link:n})}),this.index=n.index(this.element),this.siblings=e}else this.options.group&&this.options.group.length&&(this.siblings=this.options.group);this.trigger("lightbox-init",[this])},show:function(n){this.modal=e(this),this.modal.dialog.stop(),this.modal.content.stop();var i,o,r=this,s=t.$.Deferred();n=n||0,"object"==typeof n&&this.siblings.forEach(function(t,e){n[0]===t.link[0]&&(n=e)}),n<0?n=this.siblings.length-n:this.siblings[n]||(n=0),o=this.siblings[n],i={lightbox:r,source:o.source,type:o.type,index:n,promise:s,title:o.title,item:o,meta:{content:"",width:null,height:null}},this.index=n,this.modal.content.empty(),this.modal.is(":visible")||(this.modal.content.css({width:"",height:""}).empty(),this.modal.modal.show()),this.modal.loader.removeClass("uk-hidden"),s.promise().done(function(){r.data=i,r.fitSize(i)}).fail(function(){i.meta.content='<div class="uk-position-cover uk-flex uk-flex-middle uk-flex-center"><strong>Loading resource failed!</strong></div>',i.meta.width=400,i.meta.height=300,r.data=i,r.fitSize(i)}),r.trigger("showitem.uk.lightbox",[i])},fitSize:function(){var e=this,n=this.data,i=this.modal.dialog.outerWidth()-this.modal.dialog.width(),o=parseInt(this.modal.dialog.css("margin-top"),10),r=parseInt(this.modal.dialog.css("margin-bottom"),10),s=o+r,a=n.meta.content,l=e.options.duration;this.siblings.length>1&&(a=[a,'<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-previous uk-hidden-touch" data-lightbox-previous></a>','<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-next uk-hidden-touch" data-lightbox-next></a>'].join(""));var u,c,d=t.$("<div>&nbsp;</div>").css({opacity:0,position:"absolute",top:0,left:0,width:"100%","max-width":e.modal.dialog.css("max-width"),padding:e.modal.dialog.css("padding"),margin:e.modal.dialog.css("margin")}),h=n.meta.width,f=n.meta.height;d.appendTo("body").width(),u=d.width(),c=window.innerHeight-s,d.remove(),this.modal.dialog.find(".uk-modal-caption").remove(),n.title&&(this.modal.dialog.append('<div class="uk-modal-caption">'+n.title+"</div>"),c-=this.modal.dialog.find(".uk-modal-caption").outerHeight()),u<n.meta.width&&(f=Math.floor(f*(u/h)),h=u),c<f&&(f=Math.floor(c),h=Math.ceil(n.meta.width*(c/n.meta.height))),this.modal.content.css("opacity",0).width(h).html(a),"iframe"==n.type&&this.modal.content.find("iframe:first").height(f);var p=f+i,m=Math.floor(window.innerHeight/2-p/2)-s;m<0&&(m=0),this.modal.closer.addClass("uk-hidden"),e.modal.data("mwidth")==h&&e.modal.data("mheight")==f&&(l=0),this.modal.dialog.animate({width:h+i,height:f+i,top:m},l,"swing",function(){e.modal.loader.addClass("uk-hidden"),e.modal.content.css({width:""}).animate({opacity:1},function(){e.modal.closer.removeClass("uk-hidden")}),e.modal.data({mwidth:h,mheight:f})})},next:function(){this.show(this.siblings[this.index+1]?this.index+1:0)},previous:function(){this.show(this.siblings[this.index-1]?this.index-1:this.siblings.length-1)}}),t.plugin("lightbox","image",{init:function(t){t.on("showitem.uk.lightbox",function(t,e){if("image"==e.type||e.source&&e.source.match(/\.(jpg|jpeg|png|gif|svg)$/i)){var n=function(t,n,i){e.meta={content:'<img class="uk-responsive-width" width="'+n+'" height="'+i+'" src ="'+t+'">',width:n,height:i},e.type="image",e.promise.resolve()};if(i[e.source])n(e.source,i[e.source].width,i[e.source].height);else{var o=new Image;o.onerror=function(){e.promise.reject("Loading image failed")},o.onload=function(){i[e.source]={width:o.width,height:o.height},n(e.source,i[e.source].width,i[e.source].height)},o.src=e.source}}})}}),t.plugin("lightbox","youtube",{init:function(t){var e=/(\/\/.*?youtube\.[a-z]+)\/watch\?v=([^&]+)&?(.*)/,o=/youtu\.be\/(.*)/;t.on("showitem.uk.lightbox",function(t,r){var s,a,l=function(t,e,i){r.meta={content:'<iframe src="//www.youtube.com/embed/'+t+'" width="'+e+'" height="'+i+'" style="max-width:100%;"'+(n.lightbox.options.allowfullscreen?" allowfullscreen":"")+"></iframe>",width:e,height:i},r.type="iframe",r.promise.resolve()};if((a=r.source.match(e))&&(s=a[2]),(a=r.source.match(o))&&(s=a[1]),s){if(i[s])l(s,i[s].width,i[s].height);else{var u=new Image,c=!1;u.onerror=function(){i[s]={width:640,height:320},l(s,i[s].width,i[s].height)},u.onload=function(){120==u.width&&90==u.height?c?(i[s]={width:640,height:320},l(s,i[s].width,i[s].height)):(c=!0,u.src="//img.youtube.com/vi/"+s+"/0.jpg"):(i[s]={width:u.width,height:u.height},l(s,u.width,u.height))},u.src="//img.youtube.com/vi/"+s+"/maxresdefault.jpg"}t.stopImmediatePropagation()}})}}),t.plugin("lightbox","vimeo",{init:function(e){var o,r=/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/;e.on("showitem.uk.lightbox",function(e,s){var a,l=function(t,e,i){s.meta={content:'<iframe src="//player.vimeo.com/video/'+t+'" width="'+e+'" height="'+i+'" style="width:100%;box-sizing:border-box;"'+(n.lightbox.options.allowfullscreen?" allowfullscreen":"")+"></iframe>",width:e,height:i},s.type="iframe",s.promise.resolve()};(o=s.source.match(r))&&(a=o[2],i[a]?l(a,i[a].width,i[a].height):t.$.ajax({type:"GET",url:"//vimeo.com/api/oembed.json?url="+encodeURI(s.source),jsonp:"callback",dataType:"jsonp",success:function(t){i[a]={width:t.width,height:t.height},l(a,i[a].width,i[a].height)}}),e.stopImmediatePropagation())})}}),t.plugin("lightbox","video",{init:function(e){e.on("showitem.uk.lightbox",function(e,n){var o=function(t,e,i){n.meta={content:'<video class="uk-responsive-width" src="'+t+'" width="'+e+'" height="'+i+'" controls></video>',width:e,height:i},n.type="video",n.promise.resolve()};if("video"==n.type||n.source.match(/\.(mp4|webm|ogv)$/i))if(i[n.source])o(n.source,i[n.source].width,i[n.source].height);else var r=t.$('<video style="position:fixed;visibility:hidden;top:-10000px;"></video>').attr("src",n.source).appendTo("body"),s=setInterval(function(){r[0].videoWidth&&(clearInterval(s),i[n.source]={width:r[0].videoWidth,height:r[0].videoHeight},o(n.source,i[n.source].width,i[n.source].height),r.remove())},20)})}}),UIkit.plugin("lightbox","iframe",{init:function(t){t.on("showitem.uk.lightbox",function(e,i){var o=function(t,e,o){i.meta={content:'<iframe class="uk-responsive-width" src="'+t+'" width="'+e+'" height="'+o+'"'+(n.lightbox.options.allowfullscreen?" allowfullscreen":"")+"></iframe>",width:e,height:o},i.type="iframe",i.promise.resolve()};("iframe"===i.type||i.source.match(/\.(html|php)$/))&&o(i.source,t.options.width||800,t.options.height||600)})}}),t.lightbox.create=function(e,n){if(e){var i,o=[];return e.forEach(function(e){o.push(t.$.extend({source:"",title:"",type:"auto",link:!1},"string"==typeof e?{source:e}:e))}),i=t.lightbox(t.$.extend({},n,{group:o}))}},t.lightbox});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
